<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vagrant快速搭建Kubernetes集群</title>
    <url>/2021/01/17/WinVagrantKubernetesCluster/</url>
    <content><![CDATA[<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul>
<li><p>自动化搭建Kubernetes集群环境</p>
</li>
<li><p>每个集群节点挂载1..N块磁盘</p>
</li>
<li><p>能够快速搭建完成</p>
</li>
<li><p>windows 10下完成集群搭建</p>
<a id="more"></a> 

</li>
</ul>
<h4 id="基础环境-amp-amp-基础组件"><a href="#基础环境-amp-amp-基础组件" class="headerlink" title="基础环境&amp;&amp;基础组件"></a>基础环境&amp;&amp;基础组件</h4><ul>
<li>windows 10 家庭中文版</li>
<li>virtualBox 6.1.16</li>
<li>vagrant 2.2.7</li>
</ul>
<h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><ul>
<li>为了快速的构建集群，我们需要构建一个基础镜像，在这个镜像里安装了很多依赖组件</li>
<li>将指定Kubernetes版本所需要的的镜像以及二进制文件下载到本地，避免外网下载</li>
<li>github.com搜索开源的vagrantfile构建Kubernetes集群方案，进行本地化修改</li>
<li>执行构建集群测试</li>
<li>需要一个好用的Bash工具，选择的Git Bash，也不用额外安装</li>
</ul>
<h4 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h4><h5 id="安装VirtualBox和Vagrant"><a href="#安装VirtualBox和Vagrant" class="headerlink" title="安装VirtualBox和Vagrant"></a>安装VirtualBox和Vagrant</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 都是从官网下载，选择合适的版本即可</span><br><span class="line">https:&#x2F;&#x2F;www.virtualbox.org&#x2F;wiki&#x2F;Downloads</span><br><span class="line">https:&#x2F;&#x2F;www.vagrantup.com&#x2F;downloads.html</span><br></pre></td></tr></table></figure>
<h5 id="对Git-Bash稍加配置，看起来更像操作linux系统"><a href="#对Git-Bash稍加配置，看起来更像操作linux系统" class="headerlink" title="对Git Bash稍加配置，看起来更像操作linux系统"></a>对Git Bash稍加配置，看起来更像操作linux系统</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim .minttyrc</span></span><br><span class="line"></span><br><span class="line">Locale=zh_CN</span><br><span class="line">Charset=UTF-8</span><br><span class="line">Columns=120</span><br><span class="line">Rows=35</span><br><span class="line">Font=Lucida Console</span><br><span class="line">FontHeight=11</span><br><span class="line">Term=xterm-256color</span><br><span class="line">CursorType=block</span><br><span class="line">CursorBlinks=yes</span><br><span class="line">Transparency=low</span><br><span class="line">BoldAsFont=yes</span><br><span class="line">AllowBlinking=no</span><br><span class="line">Scrollbar=none</span><br><span class="line">ScrollbackLines=10000</span><br><span class="line">ClickTargetMod=off</span><br><span class="line">ComposeKey=shift</span><br><span class="line">ForegroundColour=248,248,242</span><br><span class="line">BackgroundColour=39,40,34</span><br><span class="line">CursorColour=255,255,255</span><br><span class="line">Black=39,40,34</span><br><span class="line">BoldBlack=117,113,94</span><br><span class="line">Red=249,38,114</span><br><span class="line">BoldRed=204,6,78</span><br><span class="line">Green=166,226,46</span><br><span class="line">BoldGreen=122,172,24</span><br><span class="line">Yellow=255,255,81</span><br><span class="line">BoldYellow=240,169,69</span><br><span class="line">Blue=144,255,255</span><br><span class="line">BoldBlue=33,199,233</span><br><span class="line">Magenta=174,129,255</span><br><span class="line">BoldMagenta=126,51,255</span><br><span class="line">Cyan=161,239,228</span><br><span class="line">BoldCyan=95,227,210</span><br><span class="line">White=248,248,242</span><br><span class="line">BoldWhite=249,248,245</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim .bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Shows Git branch name <span class="keyword">in</span> prompt.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Show User @ Name (still with git branch name)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> PS1=<span class="string">&quot;\u@\h \W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ &quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Or hide User @ Name (still with git branch name)</span></span><br><span class="line">export PS1=&quot;[root@localhost \W] $ &quot;</span><br></pre></td></tr></table></figure>
<h5 id="构建基础镜像"><a href="#构建基础镜像" class="headerlink" title="构建基础镜像"></a>构建基础镜像</h5><ul>
<li><p>选择centos7.6作为基础镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 先手动下载下来，我下载的v201907.24.0</span><br><span class="line">https:&#x2F;&#x2F;app.vagrantup.com&#x2F;bento&#x2F;boxes&#x2F;centos-7.6</span><br></pre></td></tr></table></figure></li>
<li><p>制作基础镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- 在下载的镜像目录操作</span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant box add centos76 centos-7.6 <span class="comment"># 若是出现问题便写成绝对路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant init centos76</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant up</span> </span><br><span class="line">--- 等待虚拟机启动---</span><br><span class="line">- 进入虚拟机，默认账号密码vagrant:vagrant</span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant status</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant ssh default</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo su</span></span><br><span class="line">- 更改为aliyun源</span><br><span class="line"><span class="meta">$</span><span class="bash"> mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum makecache fast</span></span><br><span class="line">- 配置kubernetes的yum源</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum makecache fast</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y update</span></span><br><span class="line">- 安装一些需要的工具</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum makecache fast</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip sudo ntp libaio-devel wget vim ncurses-devel autoconf automake zlib-devel  python-devel epel-release openssh-server socat  ipvsadm conntrack ntpdate</span></span><br><span class="line">- 关闭防火墙</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install iptables-services -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service iptables stop &amp;&amp; systemctl <span class="built_in">disable</span> iptables</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ntpdate cn.pool.ntp.org</span></span><br><span class="line">- 将同步时间加入计划任务</span><br><span class="line"><span class="meta">$</span><span class="bash"> crontab -e</span></span><br><span class="line">* */1 * * * /usr/sbin/ntpdate   cn.pool.ntp.org</span><br><span class="line">- 重启crond服务</span><br><span class="line"><span class="meta">$</span><span class="bash"> service crond restart</span></span><br><span class="line">- 永久关闭selinux</span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/sysconfig/selinux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span></span><br><span class="line">- 重启生效，这个可以配置完在执行</span><br><span class="line"><span class="meta">$</span><span class="bash"> reboot -f</span></span><br><span class="line">- 关闭交换空间</span><br><span class="line"><span class="meta">$</span><span class="bash"> swapoff -a</span></span><br><span class="line">- 永久禁用，打开/etc/fstab注释掉swap那一行。</span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span></span><br><span class="line">- 修改内核参数</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;<span class="string">EOF &gt;  etc/sysctl.d/k8s.conf</span></span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl --system</span></span><br><span class="line">- 安装docker，Kubernetes依赖哪个版本Docker并不重要，所以不必后安装</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y docker-ce-19.03.7-3.el7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status docker</span></span><br><span class="line">- 修改docker配置文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">&#123;</span><br><span class="line"> &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line"> &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line"> &quot;log-opts&quot;: &#123;</span><br><span class="line">   &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"> &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line"> &quot;storage-opts&quot;: [</span><br><span class="line">   &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">- 重启docker</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload &amp;&amp; systemctl restart docker</span></span><br><span class="line">- 设置iptables</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-ip6tables</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span></span><br><span class="line">vm.swappiness = 0</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">&quot;&quot;&quot; &gt; /etc/sysctl.conf</span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl -p</span></span><br><span class="line"></span><br><span class="line">- 开启ipvs</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack&quot;</span><br><span class="line">for kernel_module in $&#123;ipvs_modules&#125;; do</span><br><span class="line"> /sbin/modinfo -F filename $&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"> if [ $? -eq 0 ]; then</span><br><span class="line">   /sbin/modprobe $&#123;kernel_module&#125;</span><br><span class="line"> fi</span><br><span class="line">done</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep ip_vs</span></span><br></pre></td></tr></table></figure></li>
<li><p>生成镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- 清理一些缓存文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /tmp/*</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span> -c</span></span><br><span class="line">- 等待一切安装完成后，打包成镜像</span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant halt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vagrant package --base default --output base.box报错，因为default并不是虚拟机的名字，virtualbox里可以看到他的名字</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant package --output base.box</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant box add base base.box <span class="comment"># 这样就可以使用了</span></span></span><br></pre></td></tr></table></figure>
<h5 id="收集部署包"><a href="#收集部署包" class="headerlink" title="收集部署包"></a>收集部署包</h5></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- 收集kubernetes-1.18.2版本二进制包</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install --downloadonly --downloaddir=k8s kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2</span></span><br><span class="line">- 查看依赖镜像</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubeadm config images list --kubernetes-version=v1.18.2</span></span><br><span class="line">- 收集依赖镜像，从阿里云下载</span><br><span class="line">images=(</span><br><span class="line">kube-apiserver:v1.18.2</span><br><span class="line">kube-controller-manager:v1.18.2</span><br><span class="line">kube-scheduler:v1.18.2</span><br><span class="line">kube-proxy:v1.18.2</span><br><span class="line">pause:3.2</span><br><span class="line">etcd:3.4.3-0</span><br><span class="line">coredns:1.6.7</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">        docker pull registry.aliyuncs.com/google_containers/$imageName</span><br><span class="line">        docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName</span><br><span class="line">        docker rmi registry.aliyuncs.com/google_containers/$imageName</span><br><span class="line">done</span><br><span class="line">- 打包镜像(docker save)</span><br><span class="line">images/</span><br><span class="line">├── calico-cni.tar.gz</span><br><span class="line">├── calico-node.tar.gz</span><br><span class="line">├── coredns.tar.gz</span><br><span class="line">├── etcd.tar.gz</span><br><span class="line">├── kube-apiserver.tar.gz</span><br><span class="line">├── kube-controller-manager.tar.gz</span><br><span class="line">├── kube-proxy.tar.gz</span><br><span class="line">├── kube-scheduler.tar.gz</span><br><span class="line">└── pause.tar.gz</span><br></pre></td></tr></table></figure>
<h5 id="编写调试vagrantfile"><a href="#编写调试vagrantfile" class="headerlink" title="编写调试vagrantfile"></a>编写调试vagrantfile</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考：https:&#x2F;&#x2F;exxsyseng@bitbucket.org&#x2F;exxsyseng&#x2F;k8s_centos.git</span><br></pre></td></tr></table></figure>
<h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h4><h5 id="Nginx服务部署"><a href="#Nginx服务部署" class="headerlink" title="Nginx服务部署"></a>Nginx服务部署</h5><ul>
<li><p>部署Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- vagrant支持目录映射，windows下目录映射需要安装额外的增强设施，并且我不太想用目录映射</span><br><span class="line">- 其二是为了最小化改动vagrantfile,当部署其他版本Kubernetes时，只要将部署包放到指定目录，vagrantfile改动包获取地址就好了</span><br><span class="line">- 从nginx官网下载nginx&#x2F;Windows-1.18.0</span><br><span class="line">https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;download.html</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>将刚刚收集的依赖包放到指定目录，有一个网络插件calico</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /] $ cd /d/nginx-kubernetes-static/k8s-1.18.2/</span><br><span class="line">[root@localhost k8s-1.18.2] $ ll</span><br><span class="line">total 1085800</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121     13585  1月 12 14:34 calico.yaml</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  83932160  1月 12 09:56 calico-cni.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  73531392  1月 12 09:55 calico-node.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  43932160  1月 12 09:50 coredns.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121   5318270  1月  4 16:42 cri-tools-1.13.0-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 290010624  1月 12 09:51 etcd.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121   9205578  1月  4 16:46 kubeadm-1.18.2-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 174562304  1月 12 09:48 kube-apiserver.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 163949568  1月 12 09:50 kube-controller-manager.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121   9995342  1月  4 16:49 kubectl-1.18.2-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  21808642  1月  4 16:55 kubelet-1.18.2-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 118547456  1月 12 09:48 kube-proxy.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  19487362  1月  4 16:56 kubernetes-cni-0.8.7-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  96840704  1月 12 09:49 kube-scheduler.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121    692736  1月 12 09:50 pause.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>关于calico</p>
<blockquote>
<p>这里有一个要注意的点，virtualbox创建的虚拟机eth0地址是10.0.2.15,这个是用来vagrant ssh 通信使用的，这个我们改不了</p>
<p>我们配置了一个私有网络进行通信，就是我们主机上Host Only网卡的Ip地址段</p>
<p>而部署完calico后，会扫描所有网卡，所有虚拟机上都有10.0.2.15这个IP地址就会导致访问不通，calico Pod无法启动</p>
<p>此时我们要指定calico要使用的私有网卡，配置如下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- calicao.yaml中name:calico-node的DaemonSet 环境变量更改为指定网卡</span><br><span class="line">- name: IP_AUTODETECTION_METHOD</span><br><span class="line">  value: &quot;interface&#x3D;eth1&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>修改nginx.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~] $ cd /d/Program\ Files\ \(x86\)/nginx-1.18.0/conf/</span><br><span class="line">[root@localhost conf] $ ls</span><br><span class="line">fastcgi.conf  fastcgi_params  koi-utf  koi-win  mime.types  nginx.conf  scgi_params  uwsgi_params  win-utf</span><br><span class="line">[root@localhost conf] $ vim nginx.conf</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        # 增加了这么一个路径</span><br><span class="line">        location ~* /k8s &#123;</span><br><span class="line">            root D://nginx-kubernetes-static//;</span><br><span class="line">            autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- nginx 目录下操作</span><br><span class="line"><span class="meta">$</span><span class="bash"> start nginx.exe</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx.exe -s stop <span class="comment"># 停止nginx</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx.exe -t -c confg/nginx.conf <span class="comment"># 检查配置</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx.exe -s reload <span class="comment"># 重新加载配置</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="第一版：不需要磁盘挂载的集群"><a href="#第一版：不需要磁盘挂载的集群" class="headerlink" title="第一版：不需要磁盘挂载的集群"></a>第一版：不需要磁盘挂载的集群</h5></li>
<li><p>目录结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vagrant-cluster] $ ll</span><br><span class="line">total 17</span><br><span class="line">-rwxr-xr-x 1 antmoveh 197121 1456  1月 12 13:37 bootstrap.sh*</span><br><span class="line">-rwxr-xr-x 1 antmoveh 197121 1029  1月 13 11:51 bootstrap_kmaster.sh*</span><br><span class="line">-rwxr-xr-x 1 antmoveh 197121  220  1月 13 11:53 bootstrap_kworker.sh*</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 1570  1月 13 11:30 Vagrantfile</span><br></pre></td></tr></table></figure></li>
<li><p>Vagrantfile</p>
<blockquote>
<ul>
<li>因为我的Host-Only网卡的IP地址为192.168.56.1，所以虚拟机的私有网络使用此网段，并且固定IP</li>
<li>修改NodeCount数量便能扩展worker</li>
<li>workernode.vm.box = “base” 这个是刚刚制作的基础镜像</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -*- mode: ruby -*-</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi: <span class="built_in">set</span> ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[&#x27;VAGRANT_NO_PARALLEL&#x27;] = &#x27;yes&#x27;</span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> default router</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">config.vm.provision <span class="string">&quot;shell&quot;</span>,</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  run: <span class="string">&quot;always&quot;</span>,</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  inline: <span class="string">&quot;route del default &amp;&amp; route add default gw 192.168.56.1&quot;</span></span></span><br><span class="line"></span><br><span class="line">  config.vm.synced_folder &#x27;.&#x27;, &#x27;/vagrant&#x27;, disabled: true</span><br><span class="line"></span><br><span class="line">  config.vm.provision &quot;shell&quot;, path: &quot;bootstrap.sh&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Kubernetes Master Server</span></span><br><span class="line">  config.vm.define &quot;kmaster&quot; do |kmaster|</span><br><span class="line">    kmaster.vm.box = &quot;base&quot;</span><br><span class="line">    kmaster.vm.hostname = &quot;192.168.56.120&quot;</span><br><span class="line">    kmaster.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.120&quot;</span><br><span class="line">    kmaster.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">      v.name = &quot;192.168.56.120&quot;</span><br><span class="line">      v.memory = 4096</span><br><span class="line">      v.cpus = 2</span><br><span class="line">    end</span><br><span class="line">	kmaster.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">	  v.customize [&quot;modifyvm&quot;, :id, &quot;--macaddress2&quot;, &quot;080027df863a&quot;]</span><br><span class="line">	end</span><br><span class="line">    kmaster.vm.provision &quot;shell&quot;, path: &quot;bootstrap_kmaster.sh&quot;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  NodeCount = 2</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Kubernetes Worker Nodes</span></span><br><span class="line">  (1..NodeCount).each do |i|</span><br><span class="line">    config.vm.define &quot;kworker#&#123;i&#125;&quot; do |workernode|</span><br><span class="line">      workernode.vm.box = &quot;base&quot;</span><br><span class="line">      workernode.vm.hostname = &quot;192.168.56.12#&#123;i&#125;&quot;</span><br><span class="line">      workernode.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.12#&#123;i&#125;&quot;</span><br><span class="line">      workernode.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">        v.name = &quot;192.168.56.12#&#123;i&#125;&quot;</span><br><span class="line">        v.memory = 2048</span><br><span class="line">        v.cpus = 2</span><br><span class="line">      end</span><br><span class="line">   	  #workernode.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">   	  #  v.customize [&quot;modifyvm&quot;, :id, &quot;--macaddress2&quot;, &quot;080027df863a&quot;]</span><br><span class="line">  	  #end</span><br><span class="line">      workernode.vm.provision &quot;shell&quot;, path: &quot;bootstrap_kworker.sh&quot;</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>bootstrap.sh</p>
<blockquote>
<p>这个是所有节点都执行的脚本，主要是安装kubeadm加载依赖镜像</p>
<p>wget <a href="http://192.168.56.1/k8s-1.18.2/">http://192.168.56.1/k8s-1.18.2/</a> 访问的便是Nginx服务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> base image</span></span><br><span class="line">echo &quot;[TASK 0] base centos has install docker&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Install Kubernetes</span></span><br><span class="line">echo &quot;[TASK 1] Install Kubernetes (kubeadm, kubelet and kubectl)&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">yum install -y kubeadm-1.18.2 kubelet-1.18.2 &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">yum -y install --downloadonly --downloaddir=k8s kubelet kubeadm kubectl</span></span><br><span class="line">kube=&quot;cri-tools-1.13.0-0.x86_64.rpm kubeadm-1.18.2-0.x86_64.rpm kubectl-1.18.2-0.x86_64.rpm kubelet-1.18.2-0.x86_64.rpm kubernetes-cni-0.8.7-0.x86_64.rpm&quot;</span><br><span class="line">for i in $kube;do</span><br><span class="line">  wget http://192.168.56.1/k8s-1.18.2/$i</span><br><span class="line">done</span><br><span class="line">yum -y localinstall *rpm</span><br><span class="line">rm -rf *rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start and Enable kubelet service</span></span><br><span class="line">echo &quot;[TASK 2] Enable and start kubelet service&quot;</span><br><span class="line">systemctl enable kubelet &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl start kubelet &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line"></span><br><span class="line">echo &quot;[TASk 3] local load image&quot;</span><br><span class="line">images=&quot;calico-cni.tar.gz calico-node.tar.gz coredns.tar.gz etcd.tar.gz kube-apiserver.tar.gz kube-controller-manager.tar.gz kube-proxy.tar.gz kube-scheduler.tar.gz pause.tar.gz&quot;</span><br><span class="line">for i in $images ;do</span><br><span class="line">  wget http://192.168.56.1/k8s-1.18.2/$i</span><br><span class="line">  docker load -i $i</span><br><span class="line">  rm -rf $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Enable ssh password authentication</span></span><br><span class="line">echo &quot;[TASK 4] Enable ssh password authentication&quot;</span><br><span class="line">sed -i &#x27;s/^PasswordAuthentication no/PasswordAuthentication yes/&#x27; /etc/ssh/sshd_config</span><br><span class="line">systemctl reload sshd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set Root password</span></span><br><span class="line">echo &quot;[TASK 5] Set root password&quot;</span><br><span class="line">echo &quot;kubeadmin&quot; | passwd --stdin root &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Update vagrant user<span class="string">&#x27;s bashrc file</span></span></span><br><span class="line">echo &quot;export TERM=xterm&quot; &gt;&gt; /etc/bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>bootstrap_kmaster.sh</p>
<blockquote>
<p>这个是master节点执行的脚本</p>
<p>执行部署kuberentes master节点</p>
<p>部署网络插件</p>
<p>启动一个HTTP服务，暴露kubejoin脚本，以便被Node获取使用</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initialize Kubernetes</span></span><br><span class="line">echo &quot;[TASK 1] Initialize Kubernetes Cluster&quot;</span><br><span class="line">kubeadm init --kubernetes-version=v1.18.2 --apiserver-advertise-address=192.168.56.120 --pod-network-cidr=10.244.0.0/16 &gt;&gt; /root/kubeinit.log 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Copy Kube admin config</span></span><br><span class="line">echo &quot;[TASK 2] Copy kube admin config to Vagrant user .kube directory&quot;</span><br><span class="line">mkdir /home/vagrant/.kube</span><br><span class="line">cp /etc/kubernetes/admin.conf /home/vagrant/.kube/config</span><br><span class="line">chown -R vagrant:vagrant /home/vagrant/.kube</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Copy Kube admin config</span></span><br><span class="line">mkdir /root/.kube</span><br><span class="line">cp /etc/kubernetes/admin.conf /root/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) /root/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deploy flannel network</span></span><br><span class="line">echo &quot;[TASK 3] Deploy Calico network&quot;</span><br><span class="line">su - vagrant -c &quot;kubectl create -f http://192.168.56.1/k8s-1.18.2/calico.yaml&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Cluster join <span class="built_in">command</span></span></span><br><span class="line">echo &quot;[TASK 4] Generate and save cluster join command to /joincluster.sh&quot;</span><br><span class="line">kubeadm token create --print-join-command &gt; joincluster.sh</span><br><span class="line"></span><br><span class="line">echo &quot;[TASK 4] start http server&quot;</span><br><span class="line">nohup python -m &quot;SimpleHTTPServer&quot; &gt;&gt; /root/http.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
<li><p>bootstrap_kworker.sh</p>
<blockquote>
<p>获取kubejoin脚本，然后执行</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Join worker nodes to the Kubernetes cluster</span></span><br><span class="line">echo &quot;[TASK 1] Join node to Kubernetes Cluster&quot;</span><br><span class="line">wget http://192.168.56.120:8000/joincluster.sh</span><br><span class="line"></span><br><span class="line">cat joincluster.sh</span><br><span class="line"></span><br><span class="line">bash joincluster.sh &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>如果上边已经满足了你的需求，到这就结束了，下边就是掉坑环节了。</p>
</li>
</ul>
<h5 id="第二版：需要挂载额外磁盘的集群"><a href="#第二版：需要挂载额外磁盘的集群" class="headerlink" title="第二版：需要挂载额外磁盘的集群"></a>第二版：需要挂载额外磁盘的集群</h5><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><ul>
<li><h6 id="为什么会有这一章？"><a href="#为什么会有这一章？" class="headerlink" title="为什么会有这一章？"></a>为什么会有这一章？</h6><blockquote>
<p>因为vagrant或者virtulbox多虚拟机磁盘挂载时存在各种各样的问题</p>
</blockquote>
</li>
<li><p>理论上磁盘挂机逻辑是怎么样的？</p>
<blockquote>
<p>在一个vagrantfile中配置多个虚拟机，每个虚拟机挂载多块盘，并且大家通用示例都是这样的</p>
</blockquote>
</li>
<li><p>Vagrantfile多个虚拟机挂载多个磁盘有什么问题？</p>
<blockquote>
<p>在vagrant up时，只有第一个启动的虚拟机挂载磁盘成功并且挂载磁盘的容器并不是设置的容量，而是其他节点应该挂载的磁盘容量，</p>
<p>第二个虚拟机便报VBOX_E_FILE_ERROR (0x80bb0004)错误，对于此错误的解释大约如下：</p>
<ol>
<li>你的磁盘扇区损坏了，建议检查磁盘</li>
<li>vagrant不能并行运行</li>
<li>virtualbox存在Bug，建议你更换匹配版本</li>
<li>你使用的windows系统，报这个错误正常</li>
</ol>
<p>尝试使用插件vagrant-persistent-storage，报其他错误，无心研究这个插件了</p>
</blockquote>
</li>
<li><p>本方案如何解决上述问题</p>
<blockquote>
<p>观察到在Vagrantfile中如果只启动一个虚拟机，无论配置挂载多少块磁盘都能成功</p>
<p>由此一个想法产生了，将vagrantfile隔离在不同目录下，每个vagrantfile配置一个虚拟机，编写一个脚本来管理这些目录</p>
</blockquote>
</li>
</ul>
<h6 id="多虚拟机挂载磁盘"><a href="#多虚拟机挂载磁盘" class="headerlink" title="多虚拟机挂载磁盘"></a>多虚拟机挂载磁盘</h6><ul>
<li><p>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- bootstrap.sh、bootstrap_kmaster.sh、bootstrap_kworker.sh是没有任何更改的</span><br><span class="line">- 增加了vagrant.sh脚本</span><br><span class="line">- master/Vagrantfile删除了node部分</span><br><span class="line">- work1/Vagrantfile删除了master部分，并且增加了磁盘设置</span><br><span class="line">└─vagrant-disk</span><br><span class="line">    |-vagrant.sh</span><br><span class="line">    ├─master</span><br><span class="line">    │  └─bootstrap.sh</span><br><span class="line">    │  └─bootstrap_kmaster.sh</span><br><span class="line">    │  └─Vagrantfile</span><br><span class="line">    ├─worker1</span><br><span class="line">    │  └─bootstrap.sh</span><br><span class="line">    │  └─bootstrap_kworker.sh</span><br><span class="line">    │  └─Vagrantfile</span><br><span class="line">    ├─worker2</span><br><span class="line">    │  └─bootstrap.sh  </span><br><span class="line">    │  └─bootstrap_kworker.sh   </span><br><span class="line">    │  └─Vagrantfile   </span><br><span class="line">    └─worker3</span><br><span class="line">       └─bootstrap.sh  </span><br><span class="line">       └─bootstrap_kworker.sh</span><br><span class="line">       └─Vagrantfile</span><br></pre></td></tr></table></figure></li>
<li><p>Vagrantfile</p>
<blockquote>
<p>这是worker1的脚本，修改count=2便是worker2的脚本</p>
<p>若要添加多块盘，根据注释部分依次添加就好了，注意–port依次增加最大为30</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -*- mode: ruby -*-</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi: <span class="built_in">set</span> ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[&#x27;VAGRANT_NO_PARALLEL&#x27;] = &#x27;yes&#x27;</span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> default router</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">config.vm.provision <span class="string">&quot;shell&quot;</span>,</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  run: <span class="string">&quot;always&quot;</span>,</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  inline: <span class="string">&quot;route del default &amp;&amp; route add default gw 192.168.56.1&quot;</span></span></span><br><span class="line"></span><br><span class="line">  config.vm.synced_folder &#x27;.&#x27;, &#x27;/vagrant&#x27;, disabled: true</span><br><span class="line">  </span><br><span class="line">  config.vm.provision &quot;shell&quot;, path: &quot;bootstrap.sh&quot;</span><br><span class="line">  </span><br><span class="line">  count=1</span><br><span class="line">  config.vm.define &quot;kworker#&#123;count&#125;&quot; do |workernode|</span><br><span class="line">    workernode.vm.box = &quot;base&quot;</span><br><span class="line">    workernode.vm.hostname = &quot;192.168.56.12#&#123;count&#125;&quot;</span><br><span class="line">    workernode.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.12#&#123;count&#125;&quot;</span><br><span class="line">    workernode.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">      v.name = &quot;192.168.56.12#&#123;count&#125;&quot;</span><br><span class="line">      v.memory = 2048</span><br><span class="line">      v.cpus = 2</span><br><span class="line">    end</span><br><span class="line">   	#workernode.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">   	#  v.customize [&quot;modifyvm&quot;, :id, &quot;--macaddress2&quot;, &quot;080027df863a&quot;]</span><br><span class="line"><span class="meta">  	#</span><span class="bash">end</span></span><br><span class="line">	  </span><br><span class="line">	config.vm.provider &quot;virtualbox&quot; do |p|</span><br><span class="line">	  disk=&quot;kworker#&#123;count&#125;.vdi&quot;</span><br><span class="line">      unless File.exist?(disk)</span><br><span class="line">        p.customize [&#x27;createhd&#x27;, &#x27;--filename&#x27;, disk, &#x27;--format&#x27;, &#x27;VDI&#x27;, &#x27;--size&#x27;, 20 * 1024]</span><br><span class="line">      end</span><br><span class="line">      p.customize [&#x27;storageattach&#x27;, :id, &#x27;--storagectl&#x27;, &#x27;SATA Controller&#x27;, &#x27;--port&#x27;, 1, &#x27;--device&#x27;, 0, &#x27;--type&#x27;, &#x27;hdd&#x27;, &#x27;--medium&#x27;, disk]</span><br><span class="line">      #disk=&quot;kworker#&#123;count&#125;.vdi&quot;</span><br><span class="line">      #unless File.exist?(disk)</span><br><span class="line">      #  p.customize [&#x27;createhd&#x27;, &#x27;--filename&#x27;, disk, &#x27;--format&#x27;, &#x27;VDI&#x27;, &#x27;--size&#x27;, 20 * 1024]</span><br><span class="line">      #end</span><br><span class="line">      #p.customize [&#x27;storageattach&#x27;, :id, &#x27;--storagectl&#x27;, &#x27;SATA Controller&#x27;, &#x27;--port&#x27;, 2, &#x27;--device&#x27;, 0, &#x27;--type&#x27;, &#x27;hdd&#x27;, &#x27;--medium&#x27;, disk]</span><br><span class="line">	end</span><br><span class="line">	 </span><br><span class="line">    workernode.vm.provision &quot;shell&quot;, path: &quot;bootstrap_kworker.sh&quot;</span><br><span class="line">  end  </span><br><span class="line"> </span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>vagrant.sh</p>
<blockquote>
<p>所有操作通过这个脚本执行，模仿vagrant的命令</p>
<p>若是在新加一个节点，folders在增加一个目录就行了</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">op=$1</span><br><span class="line"></span><br><span class="line">folders=&quot;master worker1 worker2 worker3&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;up&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant up &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;destroy&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant destroy &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;reload&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant reload &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;halt&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant halt &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;ssh&quot; ]; then</span><br><span class="line">    cd $2 &amp;&amp; vagrant ssh $3 &amp;&amp; cd ..</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;status&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant status &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./vagrant.sh up # 启动集群</span><br><span class="line">./vagrant.sh halt # 停止集群</span><br><span class="line">./vagrant.sh destroy # 销毁集群</span><br><span class="line">./vagrant.sh status # 查看集群装</span><br><span class="line">./vagrant.sh reload # 重新载入集群</span><br><span class="line">./vagrant.sh ssh worker1 kworker1 # 要先指定目录在指定虚拟机名称</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Vagrant</tag>
        <tag>Kubernetes</tag>
        <tag>Windows</tag>
        <tag>Disk</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes自定义调度器开发</title>
    <url>/2021/03/07/Kubernetes%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B0%83%E5%BA%A6%E5%99%A8%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><ul>
<li><code>kube-scheduler</code> 是 kubernetes 的核心组件之一，主要负责整个集群资源的调度功能，根据特定的调度算法和策略，将 Pod 调度到最优的工作节点上面去，从而更加合理、更加充分的利用集群的资源，这也是我们选择使用 kubernetes 一个非常重要的理由。如果一门新的技术不能帮助企业节约成本、提供效率，我相信是很难推进的。 </li>
<li>默认情况下，<code>kube-scheduler</code> 提供的默认调度器能够满足我们绝大多数的要求，我们前面和大家接触的示例也基本上用的默认的策略，都可以保证我们的 Pod 可以被分配到资源充足的节点上运行。但是在实际的线上项目中，可能我们自己会比 kubernetes 更加了解我们自己的应用，比如我们希望一个 Pod 只能运行在特定的几个节点上，或者这几个节点只能用来运行特定类型的应用，这就需要我们的调度器能够可控。</li>
<li><code>kube-scheduler</code> 的主要作用就是根据特定的调度算法和调度策略将 Pod 调度到合适的 Node 节点上去，是一个独立的二进制程序，启动之后会一直监听 API Server，获取到 <code>PodSpec.NodeName</code> 为空的 Pod，对每个 Pod 都会创建一个 binding。</li>
<li>本篇文章并不是一篇Scheduler Framework介绍及简要示例文章，而是Scheduler Framework开发细节，所以有必要先阅读推荐的文章</li>
</ul>
<h4 id="调度器简介"><a href="#调度器简介" class="headerlink" title="调度器简介"></a>调度器简介</h4><p>一般来说，我们有4种扩展 Kubernetes 调度器的方法。</p>
<ul>
<li>一种方法就是直接 clone 官方的 kube-scheduler 源代码，在合适的位置直接修改代码，然后重新编译运行修改后的程序，当然这种方法是最不建议使用的，也不实用，因为需要花费大量额外的精力来和上游的调度程序更改保持一致。</li>
<li>第二种方法就是和默认的调度程序一起运行独立的调度程序，默认的调度器和我们自定义的调度器可以通过 Pod 的 <code>spec.schedulerName</code> 来覆盖各自的 Pod，默认是使用 default 默认的调度器，但是多个调度程序共存的情况下也比较麻烦，比如当多个调度器将 Pod 调度到同一个节点的时候，可能会遇到一些问题，因为很有可能两个调度器都同时将两个 Pod 调度到同一个节点上去，但是很有可能其中一个 Pod 运行后其实资源就消耗完了，并且维护一个高质量的自定义调度程序也不是很容易的，因为我们需要全面了解默认的调度程序，整体 Kubernetes 的架构知识以及各种 Kubernetes API 对象的各种关系或限制。</li>
<li>第三种方法是<a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/scheduler_extender.md">调度器扩展程序</a>，这个方案目前是一个可行的方案，可以和上游调度程序兼容，所谓的调度器扩展程序其实就是一个可配置的 Webhook 而已，里面包含 <code>过滤器</code> 和 <code>优先级</code> 两个端点，分别对应调度周期中的两个主要阶段（过滤和打分）。</li>
<li>第四种方法是通过调度框架（Scheduling Framework），Kubernetes v1.15 版本中引入了可插拔架构的调度框架，使得定制调度器这个任务变得更加的容易。调库框架向现有的调度器中添加了一组插件化的 API，该 API 在保持调度程序“核心”简单且易于维护的同时，使得大部分的调度功能以插件的形式存在，而且在我们现在的 v1.16 版本中上面的 <code>调度器扩展程序</code> 也已经被废弃了，所以以后调度框架才是自定义调度器的核心方式。</li>
</ul>
<p>如上所述可以看到Scheduling Framework才是自定义调度器的核心方式</p>
<ul>
<li>关于扩展调度器介绍文章比较多，在此选取了几篇参考文章，可以综合多篇文章更加了解Kubernetes扩展调度器</li>
<li>自定义 Kubernetes 调度器：<a href="https://www.qikqiak.com/post/custom-kube-scheduler/">https://www.qikqiak.com/post/custom-kube-scheduler/</a> </li>
<li>进击的kubernetes调度系统：<a href="https://cloud.tencent.com/developer/news/656313">https://cloud.tencent.com/developer/news/656313</a></li>
<li>Kubernetes 文档：<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/scheduling-framework/">https://kubernetes.io/zh/docs/concepts/scheduling-eviction/scheduling-framework/</a> </li>
<li>Kubernetes Scheduler Framework 扩展:：<a href="https://developer.aliyun.com/article/756016">https://developer.aliyun.com/article/756016</a> </li>
<li>Scheduler Framework 初探:：<a href="https://zhuanlan.zhihu.com/p/98853029">https://zhuanlan.zhihu.com/p/98853029</a> </li>
<li>浅谈 Kubernetes Scheduling-Framework 插件的实现:：<a href="https://www.infoq.cn/article/d1sciembtxrkvmgvf9b1">https://www.infoq.cn/article/d1sciembtxrkvmgvf9b1</a> </li>
<li>Kubernetes Scheduling Framework:： <a href="https://hackerain.me/2020/12/21/kubernetes/kube-scheduler-framework.html">https://hackerain.me/2020/12/21/kubernetes/kube-scheduler-framework.html</a></li>
</ul>
<h4 id="Scheduler-Framework"><a href="#Scheduler-Framework" class="headerlink" title="Scheduler Framework"></a>Scheduler Framework</h4><blockquote>
<p>看过各种调度器扩展文章，都不如自己动手实践一下，本篇文章记录一下实践细节</p>
<p>当我们看到一种新的技术方案时，总会有很多疑问，如下篇幅中会一一解答疑惑</p>
<p>本次使用的Kuberentes代码为v1.20.4，k8s集群环境为1.18.2</p>
</blockquote>
<h5 id="1-Kubernetes-调度器"><a href="#1-Kubernetes-调度器" class="headerlink" title="1  Kubernetes 调度器"></a>1  Kubernetes 调度器</h5><ol>
<li><p>Scheduler Framework与其他扩展调度器有什么区别</p>
<ul>
<li>直接修改kube-scheduler方式，维护难度太高这种不需考虑</li>
<li>比较常用的<code>调度程序扩展</code>实质是一个webhook，扩展调度器需要实现predicates和priorities方法并提供http接口，这种方式存在三个弊端，第一个是数据网络传输与数据序列化带来的调度性能下降；第二个是调度扩展点只有两个并且只能在kube-scheduler选择完毕后在执行扩展接口，第三个是一旦kube-scheduler发送http请求后，存在kube-scheduler重启、扩展程序崩溃等不可控因素，带来意外后果；</li>
<li>想想针对<code>调度程序扩展</code>存在的诸多问题重新设计调度扩展策略如何避免上述问题，如何解决调度扩展程序性能下降的问题，很自然的想到使用grpc服务在一定程度上降低网络开销及序列化开销；那扩展调度接口过少呢，依然是定义足够多的proto接口；第三个问题某个kube-scheduler与扩展调度服务意外崩溃重启呢，通过一些重试及拒绝调度的策略也基本可用</li>
<li>而Scheduler Framework却给与了我们另外的答案，直接将调度插件编译进kube-scheduler，性能自然最高、扩展点也是极多、崩溃重启数据不一致问题根本不存在；那么缺点是什么呢也是扩展调度插件编译进kube-scheduler，需要替换默认的调度器</li>
</ul>
</li>
<li><p>Scheduler Framework 实现原理</p>
<p>  2.1 这里并不会打开kube-scheduler代码细说，会介绍Framework主体实现流程</p>
<ul>
<li><p>要详细了解需要动手实现一下Scheduler 扩展调度器，如下篇幅中会一步步实现扩展调度器</p>
</li>
<li><p>换个角度思考一下，假使我们要使用Golang开发一个服务，这个服务需要很多功能扩展点而功能扩展点有其他人编写，那么怎么来设计这个程序呢？</p>
</li>
<li><p>以scheduler为例来思考一下，首先扩展点很多如pod排序、node过滤、node打分、pod节点绑定，那么我们忒首先把这些算法分类：pod排序类、node过滤类、node打分类、pod绑定类，并根据这些分类分别定义扩展方法，自然想到定义一系列的interface，让扩展者实现这些接口，将实现的struct注册到程序的调用链中</p>
<ul>
<li>这便是Pod Filter插件接口，只要实现这个接口的struct便能注册到scheduler</li>
<li>kubernetes/pkg/scheduler/framework/interface.go</li>
<li>真实Kubernetes interface设计中，将这些接口打的很碎，几乎一个函数一个接口</li>
<li>并且每个插件都需要实现Name()方法，每个插件的名称必须唯一</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> FilterPlugin <span class="keyword">interface</span> &#123;</span><br><span class="line">	Plugin</span><br><span class="line">	<span class="comment">// Filter is called by the scheduling framework.</span></span><br><span class="line">	<span class="comment">// All FilterPlugins should return &quot;Success&quot; to declare that</span></span><br><span class="line">	<span class="comment">// the given node fits the pod. If Filter doesn&#x27;t return &quot;Success&quot;</span></span><br><span class="line">	Filter(ctx context.Context, state *CycleState, pod *v1.Pod, nodeInfo *NodeInfo) *Status</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<ul>
<li><p>我们知道一个结构体是可以实现很多interface的，假设一个开发者开发了四个struct 名字叫A、B、C、D，都实现Filter函数，那么我们的调用方在调用这些插件时该先调用哪个呢，是不是Filter函数按照A-B-C-D顺序调用，那Score函数也按照A-B-C-D顺序调用呢；</p>
<ul>
<li>首选调用顺序需要通过通过配置文件决定，在scheduler framework启动时需要加载配置 <code>KubeSchedulerConfiguration</code></li>
<li>决定函数调用顺序的是scheduler framework启动时的配置文件，每个函数均需设定调用顺序如Filter A-B-C-D、Score函数C-B-A-D，通过这样的设计可以非常自由的设计算法函数执行顺序，假设PreBind B-D，不写的插件自然不调用</li>
<li>该配置文件名为<code>KubeSchedulerConfiguration</code>，在部署时会详细介绍该配置，这个名称看起来是个资源对象，但是在k8s集群中是查不到这个资源的</li>
</ul>
<p>2.2 至此可以梳理下，我们定义了一些列的接口并且提供了注册方法，通过链式方式执行多个注册函数，伪代码如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">KubeSchedulerConfiguration</span><br><span class="line">  - Filter</span><br><span class="line">    - A</span><br><span class="line">    - B</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 加载配置文件</span></span><br><span class="line">    config.load(KubeSchedulerConfiguration)</span><br><span class="line">    <span class="comment">// 注册插件A B</span></span><br><span class="line">    <span class="comment">// 根据插件中函数配置，设置插件在不同调度阶段的执行位置</span></span><br><span class="line">    register.plugins(A)</span><br><span class="line">    register.plugins(B)</span><br><span class="line">    <span class="comment">// 运行调度插件</span></span><br><span class="line">    <span class="keyword">go</span> run()</span><br><span class="line">    <span class="keyword">for</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Filter</span></span><br><span class="line">    <span class="keyword">for</span> key, <span class="function"><span class="keyword">func</span> := <span class="title">range</span> <span class="title">filter</span>.<span class="title">plugins</span></span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">(pod, node)</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="2-开发环境准备"><a href="#2-开发环境准备" class="headerlink" title="2  开发环境准备"></a>2  开发环境准备</h5><ol>
<li>如何选择测试环境及Scheduler Framework 开发版本</li>
</ol>
<ul>
<li>因为手边搭建了一个k8s 1.18.2环境，便使用这个环境进行测试，后续会搭建更多测试环境进行测试</li>
<li>Scheduler Framework选择的是kubernetes 1.20.4版本，在1.20版本之前，Scheduler Framework为v1alpha1版本，1.20为正式版本</li>
</ul>
<h5 id="3-插件开发"><a href="#3-插件开发" class="headerlink" title="3 插件开发"></a>3 插件开发</h5><h6 id="3-1-项目开发"><a href="#3-1-项目开发" class="headerlink" title="3.1 项目开发"></a>3.1 项目开发</h6><ol>
<li><p>创建项目，由于scheduler plugins依赖了很重的库(kubernetes)，最好是单独建立项目进行开发</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir scheduler</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> scheduler</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> go mod init scheduler</span></span><br></pre></td></tr></table></figure></li>
<li><p>要进行自定义调度器开发，最好找到一个参考项目</p>
<ul>
<li>sample-scheduler-framework： <a href="https://github.com/cnych/sample-scheduler-framework">https://github.com/cnych/sample-scheduler-framework</a></li>
<li>官方调度器插件实现：<a href="https://github.com/kubernetes-sigs/scheduler-plugins">https://github.com/kubernetes-sigs/scheduler-plugins</a></li>
<li>项目结构如下，这两个项目的调度器实现均是&lt;1.20</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">├── deploy</span><br><span class="line">│   ├── sample-scheduler.yaml</span><br><span class="line">│   └── test-scheduler.yaml</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">├── pkg</span><br><span class="line">│   └── plugins</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure>
<p>main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;scheduler/pkg/plugins&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">	&quot;</span>time<span class="string">&quot;</span></span><br><span class="line"><span class="string">	&quot;</span>k8s.io/component-base/logs<span class="string">&quot;</span></span><br><span class="line"><span class="string">	&quot;</span>k8s.io/kubernetes/cmd/kube-scheduler/app<span class="string">&quot;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">	rand.Seed(time.Now().UnixNano())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	// Register custom plugins to the scheduler framework.</span></span><br><span class="line"><span class="string">	// Later they can consist of scheduler profile(s) and hence</span></span><br><span class="line"><span class="string">	// used by various kinds of workloads.</span></span><br><span class="line"><span class="string">	command := app.NewSchedulerCommand(</span></span><br><span class="line"><span class="string">		app.WithPlugin(plugins.Name, plugins.New),</span></span><br><span class="line"><span class="string">	)</span></span><br><span class="line"><span class="string">	logs.InitLogs()</span></span><br><span class="line"><span class="string">	defer logs.FlushLogs()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	if err := command.Execute(); err != nil &#123;</span></span><br><span class="line"><span class="string">		os.Exit(1)</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>plugin.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> plugins</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	v1 <span class="string">&quot;k8s.io/api/core/v1&quot;</span></span><br><span class="line">	<span class="string">&quot;k8s.io/apimachinery/pkg/runtime&quot;</span></span><br><span class="line">	lcorev1 <span class="string">&quot;k8s.io/client-go/listers/core/v1&quot;</span></span><br><span class="line">	lstoragev1 <span class="string">&quot;k8s.io/client-go/listers/storage/v1&quot;</span></span><br><span class="line">	<span class="string">&quot;k8s.io/klog/v2&quot;</span></span><br><span class="line">	<span class="string">&quot;k8s.io/kubernetes/pkg/scheduler/framework&quot;</span></span><br><span class="line">	<span class="string">&quot;sort&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件名称</span></span><br><span class="line"><span class="keyword">const</span> Name = <span class="string">&quot;plugins&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Plugins <span class="keyword">struct</span> &#123;</span><br><span class="line">	handle    framework.Handle</span><br><span class="line">	scLister  lstoragev1.StorageClassLister</span><br><span class="line">	pvcLister lcorev1.PersistentVolumeClaimLister</span><br><span class="line">	pvLister  lcorev1.PersistentVolumeLister</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示此结构体实现了哪些接口，这样编译器会自动检测你是否实现了所有方法</span></span><br><span class="line"><span class="keyword">var</span> _ framework.FilterPlugin = &amp;LocalStorage&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> _ framework.ScorePlugin = &amp;LocalStorage&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//type PluginFactory = func(configuration *runtime.Unknown, f FrameworkHandle) (Plugin, error)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(_ runtime.Object, handle framework.Handle)</span> <span class="params">(framework.Plugin, error)</span></span> &#123;</span><br><span class="line">	scLister := handle.SharedInformerFactory().Storage().V1().StorageClasses().Lister()</span><br><span class="line">	pvcLister := handle.SharedInformerFactory().Core().V1().PersistentVolumeClaims().Lister()</span><br><span class="line">	pvLister := handle.SharedInformerFactory().Core().V1().PersistentVolumes().Lister()</span><br><span class="line">	<span class="keyword">return</span> &amp;Plugins&#123;</span><br><span class="line">		handle:    handle,</span><br><span class="line">		pvcLister: pvcLister,</span><br><span class="line">		scLister:  scLister,</span><br><span class="line">		pvLister:  pvLister,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Plugins)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤掉不符合当前 Pod 运行条件的Node（相当于旧版本的 predicate）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Plugins)</span> <span class="title">Filter</span><span class="params">(ctx context.Context, cycleState *framework.CycleState, pod *v1.Pod, node *framework.NodeInfo)</span> *<span class="title">framework</span>.<span class="title">Status</span></span> &#123;</span><br><span class="line">	klog.V(<span class="number">3</span>).Infof(<span class="string">&quot;filter pod: %v, node: %v&quot;</span>, pod.Name, node.Node().Name)</span><br><span class="line">    pvc, err := ls.pvcLister.PersistentVolumeClaims(pod.Namespace).Get(pvcName)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> localPvc, nodeName, err</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span> rand.Intn(<span class="number">10</span>) &gt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> framework.NewStatus(framework.UnschedulableAndUnresolvable, <span class="string">&quot;node pid resource insufficient&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">	klog.V(<span class="number">3</span>).Infof(<span class="string">&quot;filter success pod: %v, node: %v&quot;</span>, pod.Name, node.Node().Name)</span><br><span class="line">	<span class="keyword">return</span> framework.NewStatus(framework.Success, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对节点进行打分（相当于旧版本的 priorities）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Plugins)</span> <span class="title">Score</span><span class="params">(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int64</span>, *framework.Status)</span></span> &#123;</span><br><span class="line">	klog.V(<span class="number">3</span>).Infof(<span class="string">&quot;score pod: %v, node: %v&quot;</span>, pod.Name, nodeName)</span><br><span class="line">    score := rand.intn(<span class="number">10</span>)</span><br><span class="line">	klog.V(<span class="number">3</span>).Infof(<span class="string">&quot;score pod: %v, node: %v score %v&quot;</span>, pod.Name, nodeName, score)</span><br><span class="line">	<span class="keyword">return</span> score, framework.NewStatus(framework.Success)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ScoreExtensions of the Score plugin.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Plugins)</span> <span class="title">ScoreExtensions</span><span class="params">()</span> <span class="title">framework</span>.<span class="title">ScoreExtensions</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>第一点：每一个插件都需要有一个name并且实现Name()方法，假设你要实现第二个example插件，则在pkg目录下创建example目录在该目录下实现新插件，这个意思是说每个插件建立独立的目录并且插件名称要不同；</p>
</li>
<li><p>第二点：在进行插件开发时，我们几乎无可避免的要调用k8s API，对此插件早就提供好了入口</p>
<p>framework.Handle(kubernetes/pkg/scheduler/framework/interface.go:515)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Handle <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// 这是一个快照，可以通过它获取节点信息</span></span><br><span class="line">	SnapshotSharedLister() SharedLister</span><br><span class="line">	....</span><br><span class="line">	<span class="comment">// k8s API</span></span><br><span class="line">	ClientSet() clientset.Interface</span><br><span class="line">	<span class="comment">// EventRecorder returns an event recorder.</span></span><br><span class="line">	EventRecorder() events.EventRecorder</span><br><span class="line">	<span class="comment">// 我们调用API通常使用这个方法，他查询的是本地cache</span></span><br><span class="line">	<span class="comment">// 使用方法就像我们上边代码中的示例</span></span><br><span class="line">	SharedInformerFactory() informers.SharedInformerFactory</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> unroll the wrapped interfaces to Handle.</span></span><br><span class="line">	PreemptHandle() PreemptHandle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>第三点：进行项目编译时，可能会报依赖错误，因为go mod 会自动引入Kubernetes最新版本，新版本的可能引入了新的依赖</p>
</li>
<li><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.20.4/go.mod">https://github.com/kubernetes/kubernetes/blob/v1.20.4/go.mod</a> 参考指定版本的Kubernetes却哪个依赖补充上来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module scheduler</span><br><span class="line"></span><br><span class="line">go 1.15</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">	github.com&#x2F;fsnotify&#x2F;fsnotify v1.4.9</span><br><span class="line">	github.com&#x2F;hashicorp&#x2F;golang-lru v0.5.4 &#x2F;&#x2F; indirect</span><br><span class="line">	github.com&#x2F;imdario&#x2F;mergo v0.3.9 &#x2F;&#x2F; indirect</span><br><span class="line">	github.com&#x2F;onsi&#x2F;gomega v1.10.1 &#x2F;&#x2F; indirect</span><br><span class="line">	github.com&#x2F;spf13&#x2F;viper v1.7.1</span><br><span class="line">	k8s.io&#x2F;api v0.20.4</span><br><span class="line">	k8s.io&#x2F;apimachinery v0.20.4</span><br><span class="line">	k8s.io&#x2F;client-go v0.20.4</span><br><span class="line">	k8s.io&#x2F;component-base v0.20.4</span><br><span class="line">	k8s.io&#x2F;klog&#x2F;v2 v2.5.0</span><br><span class="line">	k8s.io&#x2F;kubernetes v0.0.0-00010101000000-000000000000</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">replace (</span><br><span class="line">	k8s.io&#x2F;api &#x3D;&gt; k8s.io&#x2F;api v0.20.4</span><br><span class="line">	k8s.io&#x2F;apiextensions-apiserver &#x3D;&gt; k8s.io&#x2F;apiextensions-apiserver v0.20.4</span><br><span class="line">	k8s.io&#x2F;apimachinery &#x3D;&gt; k8s.io&#x2F;apimachinery v0.20.4</span><br><span class="line">	k8s.io&#x2F;apiserver &#x3D;&gt; k8s.io&#x2F;apiserver v0.20.4</span><br><span class="line">	k8s.io&#x2F;cli-runtime &#x3D;&gt; k8s.io&#x2F;cli-runtime v0.20.4</span><br><span class="line">	k8s.io&#x2F;client-go &#x3D;&gt; k8s.io&#x2F;client-go v0.20.4</span><br><span class="line">	k8s.io&#x2F;cloud-provider &#x3D;&gt; k8s.io&#x2F;cloud-provider v0.20.4</span><br><span class="line">	k8s.io&#x2F;cluster-bootstrap &#x3D;&gt; k8s.io&#x2F;cluster-bootstrap v0.20.4</span><br><span class="line">	k8s.io&#x2F;code-generator &#x3D;&gt; k8s.io&#x2F;code-generator v0.20.4</span><br><span class="line">	k8s.io&#x2F;component-base &#x3D;&gt; k8s.io&#x2F;component-base v0.20.4</span><br><span class="line">	k8s.io&#x2F;component-helpers &#x3D;&gt; k8s.io&#x2F;component-helpers v0.20.4</span><br><span class="line">	k8s.io&#x2F;controller-manager &#x3D;&gt; k8s.io&#x2F;controller-manager v0.20.4</span><br><span class="line">	k8s.io&#x2F;cri-api &#x3D;&gt; k8s.io&#x2F;cri-api v0.20.4</span><br><span class="line">	k8s.io&#x2F;csi-translation-lib &#x3D;&gt; k8s.io&#x2F;csi-translation-lib v0.20.4</span><br><span class="line">	k8s.io&#x2F;kube-aggregator &#x3D;&gt; k8s.io&#x2F;kube-aggregator v0.20.4</span><br><span class="line">	k8s.io&#x2F;kube-controller-manager &#x3D;&gt; k8s.io&#x2F;kube-controller-manager v0.20.4</span><br><span class="line">	k8s.io&#x2F;kube-proxy &#x3D;&gt; k8s.io&#x2F;kube-proxy v0.20.4</span><br><span class="line">	k8s.io&#x2F;kube-scheduler &#x3D;&gt; k8s.io&#x2F;kube-scheduler v0.20.4</span><br><span class="line">	k8s.io&#x2F;kubectl &#x3D;&gt; k8s.io&#x2F;kubectl v0.20.4</span><br><span class="line">	k8s.io&#x2F;kubelet &#x3D;&gt; k8s.io&#x2F;kubelet v0.20.4</span><br><span class="line">	k8s.io&#x2F;kubernetes &#x3D;&gt; k8s.io&#x2F;kubernetes v1.20.4</span><br><span class="line">	k8s.io&#x2F;legacy-cloud-providers &#x3D;&gt; k8s.io&#x2F;legacy-cloud-providers v0.20.4</span><br><span class="line">	k8s.io&#x2F;metrics &#x3D;&gt; k8s.io&#x2F;metrics v0.20.4</span><br><span class="line">	k8s.io&#x2F;mount-utils &#x3D;&gt; k8s.io&#x2F;mount-utils v0.20.4</span><br><span class="line">	k8s.io&#x2F;sample-apiserver &#x3D;&gt; k8s.io&#x2F;sample-apiserver v0.20.4</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="3-2-本地调试"><a href="#3-2-本地调试" class="headerlink" title="3.2 本地调试"></a>3.2 本地调试</h6></li>
<li><p>如果要进行本地调试，我们首先要介绍一下KubeSchedulerConfiguration配置文件</p>
</li>
<li><p>这个配置的结构体定义kube-scheduler/config/v1beta1/types.go:44</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeSchedulerConfiguration</span></span><br><span class="line"><span class="attr">leaderElection:</span></span><br><span class="line">  <span class="attr">leaderElect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">resourceName:</span> <span class="string">plugins-scheduler</span></span><br><span class="line">  <span class="attr">resourceNamespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="string">//</span> <span class="string">本地调试时需要指定，部署到集群中这个配置就不需要了</span></span><br><span class="line"><span class="attr">clientConnection:</span></span><br><span class="line">  <span class="attr">kubeconfig:</span> <span class="string">/root/.kube/config</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">schedulerName:</span> <span class="string">plugins-scheduler</span></span><br><span class="line">    <span class="attr">plugins:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;plugins&quot;</span></span><br><span class="line">            <span class="string">//</span> <span class="string">大部分默认算法的权重都是1，不写是0</span></span><br><span class="line">            <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">score:</span></span><br><span class="line">        <span class="attr">enabled:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;plugins&quot;</span></span><br><span class="line">            <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;exmaples&quot;</span></span><br><span class="line">            <span class="attr">weight:</span> <span class="number">2</span>      </span><br></pre></td></tr></table></figure>
<ul>
<li>本地运行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scheduler</span><br><span class="line">--authentication-kubeconfig=/root/.kube/config</span><br><span class="line">--authorization-kubeconfig=/root/.kube/config</span><br><span class="line">--kubeconfig=/root/.kube/config</span><br><span class="line">--config=/etc/kubernetes/scheduler-config.yaml // 这个就是上边的配置文件</span><br><span class="line">--v=3</span><br></pre></td></tr></table></figure>
<ul>
<li>测试yaml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: scheduler-test</span><br><span class="line">  labels:</span><br><span class="line">    app: scheduler-test</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: scheduler-test</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: scheduler-test</span><br><span class="line">    spec:</span><br><span class="line">      &#x2F;&#x2F; 指定调度</span><br><span class="line">      schedulerName: plugins-scheduler</span><br><span class="line">      containers:</span><br><span class="line">        - name: web-server</span><br><span class="line">          image: docker.io&#x2F;library&#x2F;nginx:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h6 id="3-3-项目部署"><a href="#3-3-项目部署" class="headerlink" title="3.3 项目部署"></a>3.3 项目部署</h6><ul>
<li><p>Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.15</span>-buster AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE=on CGO_ENABLED=<span class="number">0</span> GOOS=linux GOARCH=amd64 GOPROXY=https://goproxy.cn,direct</span><br><span class="line"><span class="keyword">ENV</span> WORKSPACE=/workspace/scheduler</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$WORKSPACE</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/cmd &amp;&amp; go build -gcflags <span class="string">&#x27;-N -l&#x27;</span> -o /tmp/test-scheduler .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.12</span></span><br><span class="line"><span class="keyword">ENV</span> WORKSPACE=/workspace/bocloud.com/cloudnative/test/scheduler</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder <span class="variable">$WORKSPACE</span>/debug/scheduler-config.yaml /etc/kubernetes</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder <span class="variable">$WORKSPACE</span>/config.json /etc/<span class="built_in">test</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /tmp/test-scheduler /bin/test-scheduler</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /bin/test-scheduler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /bin</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;test-scheduler&quot;</span>]</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>deploy.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-scheduler-clusterrole</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>, <span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;delete&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;bindings&quot;</span>, <span class="string">&quot;pods/binding&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;pods/status&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;patch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;replicationcontrollers&quot;</span>, <span class="string">&quot;services&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;apps&quot;</span>, <span class="string">&quot;extensions&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;replicasets&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;apps&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;statefulsets&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;policy&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;poddisruptionbudgets&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>, <span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;configmaps&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>, <span class="string">&quot;csinodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;coordination.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;leases&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;events.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;patch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-scheduler-sa</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-scheduler-clusterrolebinding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-scheduler-clusterrole</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-scheduler-sa</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-scheduler-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">scheduler-config.yaml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">KubeSchedulerConfiguration</span></span><br><span class="line">    <span class="attr">leaderElection:</span></span><br><span class="line">      <span class="attr">leaderElect:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">resourceName:</span>  <span class="string">test-scheduler</span></span><br><span class="line">      <span class="attr">resourceNamespace:</span> <span class="string">kube-system</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">schedulerName:</span> <span class="string">test-scheduler</span></span><br><span class="line">      <span class="attr">plugins:</span></span><br><span class="line">        <span class="attr">filter:</span></span><br><span class="line">          <span class="attr">enabled:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;plugins&quot;</span></span><br><span class="line">              <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">score:</span></span><br><span class="line">          <span class="attr">enabled:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;plugins</span></span><br><span class="line"><span class="string">              weight: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: apps/v1</span></span><br><span class="line"><span class="string">kind: Deployment</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: test-scheduler</span></span><br><span class="line"><span class="string">  namespace: kube-system</span></span><br><span class="line"><span class="string">  labels:</span></span><br><span class="line"><span class="string">    component: test-scheduler</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  replicas: 1</span></span><br><span class="line"><span class="string">  selector:</span></span><br><span class="line"><span class="string">    matchLabels:</span></span><br><span class="line"><span class="string">      component: test-scheduler</span></span><br><span class="line"><span class="string">  template:</span></span><br><span class="line"><span class="string">    metadata:</span></span><br><span class="line"><span class="string">      labels:</span></span><br><span class="line"><span class="string">        component: test-scheduler</span></span><br><span class="line"><span class="string">    spec:</span></span><br><span class="line"><span class="string">      serviceAccount: test-scheduler-sa</span></span><br><span class="line"><span class="string">      priorityClassName: system-cluster-critical</span></span><br><span class="line"><span class="string">      containers:</span></span><br><span class="line"><span class="string">        - name: test-scheduler</span></span><br><span class="line"><span class="string">          image: docker.hub.com/test/scheduler:latest</span></span><br><span class="line"><span class="string">          imagePullPolicy: &quot;</span><span class="string">Always&quot;</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;test-scheduler&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--config=/etc/kube/scheduler-config.yaml</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--v=3</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;50m&quot;</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">scheduler-config</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/etc/kube/</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/etc/test/</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">scheduler-config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">test-scheduler-config</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">test-csi-config</span></span><br></pre></td></tr></table></figure>
<h4 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h4><ol>
<li><p>使用Framework 的调度器会对影响默认调度算法吗</p>
<ul>
<li>不会影响，kube-scheduler首先执行默认调度算法在执行自定义调度调度算法，这个会受<code>KubeSchedulerConfiguration</code>配置文件影响</li>
</ul>
</li>
<li><p>kube-scheduler 默认调度算法有哪些</p>
<ul>
<li><p>当进行本地调试时将日志级别设置为<code>-v=3</code>,可以观察到内置调度算法及自定义调度算法所在位置</p>
</li>
<li><p>从输出日志中可以观察到算法名称及权重，当然也可以通过源码看到默认加载的算法kuberentes/pkg/scheduler/framework/plugins/legacy_registry.go:181</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">clientConnection:</span></span><br><span class="line">  <span class="attr">acceptContentTypes:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">burst:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">contentType:</span> <span class="string">application/vnd.kubernetes.protobuf</span></span><br><span class="line">  <span class="attr">kubeconfig:</span> <span class="string">/root/.kube/config</span></span><br><span class="line">  <span class="attr">qps:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">enableContentionProfiling:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enableProfiling:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">healthzBindAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:10251</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeSchedulerConfiguration</span></span><br><span class="line"><span class="attr">leaderElection:</span></span><br><span class="line">  <span class="attr">leaderElect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">leaseDuration:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">renewDeadline:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">resourceLock:</span> <span class="string">leases</span></span><br><span class="line">  <span class="attr">resourceName:</span> <span class="string">test-scheduler</span></span><br><span class="line">  <span class="attr">resourceNamespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">retryPeriod:</span> <span class="string">2s</span></span><br><span class="line"><span class="attr">metricsBindAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:10251</span></span><br><span class="line"><span class="attr">parallelism:</span> <span class="number">16</span></span><br><span class="line"><span class="attr">percentageOfNodesToScore:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">podInitialBackoffSeconds:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">podMaxBackoffSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pluginConfig:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">DefaultPreemptionArgs</span></span><br><span class="line">      <span class="attr">minCandidateNodesAbsolute:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">minCandidateNodesPercentage:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">DefaultPreemption</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">hardPodAffinityWeight:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">InterPodAffinityArgs</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">InterPodAffinity</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">NodeAffinityArgs</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">NodeAffinity</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">NodeResourcesFitArgs</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">NodeResourcesFit</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">NodeResourcesLeastAllocatedArgs</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cpu</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">memory</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">NodeResourcesLeastAllocated</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">defaultingType:</span> <span class="string">System</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">PodTopologySpreadArgs</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">PodTopologySpread</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line">      <span class="attr">bindTimeoutSeconds:</span> <span class="number">600</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">VolumeBindingArgs</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">VolumeBinding</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="attr">bind:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DefaultBinder</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">filter:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeUnschedulable</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeName</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TaintToleration</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeAffinity</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodePorts</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeResourcesFit</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">VolumeRestrictions</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">EBSLimits</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GCEPDLimits</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeVolumeLimits</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">AzureDiskLimits</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">VolumeBinding</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">VolumeZone</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PodTopologySpread</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">InterPodAffinity</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">plugins</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">permit:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">postBind:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">postFilter:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DefaultPreemption</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">preBind:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">VolumeBinding</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">preFilter:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeResourcesFit</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodePorts</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PodTopologySpread</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">InterPodAffinity</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">VolumeBinding</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">preScore:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">InterPodAffinity</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PodTopologySpread</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TaintToleration</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">queueSort:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PrioritySort</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">reserve:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">VolumeBinding</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">score:</span></span><br><span class="line">      <span class="attr">enabled:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeResourcesBalancedAllocation</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ImageLocality</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">InterPodAffinity</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeResourcesLeastAllocated</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodeAffinity</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NodePreferAvoidPods</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">10000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PodTopologySpread</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TaintToleration</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">plugins</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">schedulerName:</span> <span class="string">test-scheduler</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>当出现Pod调度失败等问题如何排查</p>
<ul>
<li>将日志级别设置为<code>-v=5</code>可观察到更详细的调度日志</li>
</ul>
</li>
<li><p>如何多个调度器共存，如一部分Pod使用default-scheduler,一部分Pod使用自定义调度器</p>
<ul>
<li><p><a href="https://kubernetes.io/zh/docs/reference/scheduling/config/">https://kubernetes.io/zh/docs/reference/scheduling/config/</a></p>
</li>
<li><p>如下所示，即保留了默认调度器又新增了特殊调度器，如此可以为不同服务配置不同调度器且不会出现资源视图不一致问题</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubescheduler.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeSchedulerConfiguration</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">schedulerName:</span> <span class="literal">no</span><span class="string">-scoring-scheduler</span></span><br><span class="line">    <span class="attr">plugins:</span></span><br><span class="line">      <span class="attr">preScore:</span></span><br><span class="line">        <span class="attr">disabled:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">      <span class="attr">score:</span></span><br><span class="line">        <span class="attr">disabled:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>kube-scheduler 是如何对node进行打分的</p>
<ul>
<li>在priorities阶段会为每个node打分，<code>分值*算法权重</code>便是该算法对该node的评分</li>
<li>分值范围0-10，一般默认算法权重为1</li>
</ul>
</li>
</ol>
<h4 id="kube-scheduler源码分析链接"><a href="#kube-scheduler源码分析链接" class="headerlink" title="kube-scheduler源码分析链接"></a>kube-scheduler源码分析链接</h4><ul>
<li>附上几篇文章了解一下吧，调度器代码研究还是要需要花点时间的</li>
<li>Kubernetes Scheduler扩展功能：<a href="https://blog.csdn.net/i_want_to_be_a_god/article/details/106969992">https://blog.csdn.net/i_want_to_be_a_god/article/details/106969992</a></li>
<li>Kuberentes 调度器源码： <a href="http://hutao.tech/k8s-source-code-analysis/core/scheduler/init.html">http://hutao.tech/k8s-source-code-analysis/core/scheduler/init.html</a></li>
<li>kube-scheduler 源码分析：<a href="https://www.huweihuang.com/kubernetes-notes/code-analysis/kube-scheduler/PrioritizeNodes.html">https://www.huweihuang.com/kubernetes-notes/code-analysis/kube-scheduler/PrioritizeNodes.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Scheduler</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeletRunInContainer</title>
    <url>/2021/03/23/KubeletRunInContainer/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul>
<li>Kubernetes服务组件包括<code>kube-apiserver kube-controller-manager kube-scheduler kubelet</code> ，除kubelet外其他组件均已容器化运行，使用命令<code>kubectl get pods -n kube-system</code>可观察到运行的容器组件</li>
<li>本篇文章主要讲述如何在容器中运行kubelet</li>
</ul>
<h4 id="Kubelet容器化部署"><a href="#Kubelet容器化部署" class="headerlink" title="Kubelet容器化部署"></a>Kubelet容器化部署</h4><blockquote>
<ul>
<li>kubelet容器化部署并不鲜见，可以搜索到各种相关示例如：<a href="https://github.com/kubernetes-retired/kubernetes-anywhere/blob/master/phase2/ignition/vanilla/kubelet.service">https://github.com/kubernetes-retired/kubernetes-anywhere/blob/master/phase2/ignition/vanilla/kubelet.service</a></li>
</ul>
</blockquote>
<h5 id="选择kubelet容器"><a href="#选择kubelet容器" class="headerlink" title="选择kubelet容器"></a>选择kubelet容器</h5><ul>
<li><p>Kubernetes官方镜像<code>googlecontainersmirrors/hyperkube-amd64</code>已经将各个组件的二进制文件收集到镜像中，上述仓库为谷歌镜像仓库，原镜像地址为<code>gcr.io/google-containers/hyperkube-amd64</code></p>
</li>
<li><p>从<code>https://console.cloud.google.com/gcr/images/google-containers</code> 搜索<code>hyperkube-amd64</code>可获取原镜像地址</p>
</li>
<li><p>Kubernetes 1.19版本以后，不在构建<code>hyperkube-adm64</code>超级镜像，稍后会介绍构建我们自己的kubelet</p>
</li>
</ul>
<h5 id="Master节点部署"><a href="#Master节点部署" class="headerlink" title="Master节点部署"></a>Master节点部署</h5><ul>
<li><p>Kubernetes Master节点使用kubeadm工具快速部署：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.19.4 --apiserver-advertise-address=192.168.56.120 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>
<h5 id="Worker节点"><a href="#Worker节点" class="headerlink" title="Worker节点"></a>Worker节点</h5></li>
<li><p>Kubelet正常启动，主要有以下几个关键点</p>
<ul>
<li>生成客户端证书</li>
<li>创建Kubelet配置文件</li>
<li>启动Kubelet</li>
</ul>
</li>
<li><p>生成客户端证书</p>
<ul>
<li><p>将Master节点 目录<code>/etc/kubernetes/pki</code>下根证书<code>ca.crt ca.key</code>复制到Worker节点 <code>/etc/kubernetes</code>目录下，并将<code>ca.crt</code>复制到<code>/etc/kubernetes/pki</code>目录下</p>
</li>
<li><p>使用如下命令创建客户端证书</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm init phase kubeconfig kubelet --cert-dir=/etc/kubernetes --kubeconfig-dir=/etc/kubernetes --apiserver-advertise-address=192.168.56.120 --kubernetes-version=v1.19.4</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>创建配置文件</p>
<ul>
<li><p>在<code>/etc/kubernetes</code>目录下创建kubelet_settings.yml，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line">  <span class="attr">anonymous:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheTTL:</span> <span class="string">0s</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">x509:</span></span><br><span class="line">    <span class="attr">clientCAFile:</span> <span class="string">/etc/kubernetes/pki/ca.crt</span></span><br><span class="line"><span class="attr">authorization:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">Webhook</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheAuthorizedTTL:</span> <span class="string">0s</span></span><br><span class="line">    <span class="attr">cacheUnauthorizedTTL:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">cgroupDriver:</span> <span class="string">systemd</span></span><br><span class="line"><span class="attr">clusterDNS:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line"><span class="attr">clusterDomain:</span> <span class="string">cluster.local</span></span><br><span class="line"><span class="attr">cpuManagerReconcilePeriod:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">evictionPressureTransitionPeriod:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">fileCheckFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">healthzBindAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">healthzPort:</span> <span class="number">10248</span></span><br><span class="line"><span class="attr">httpCheckFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">imageMinimumGCAge:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="attr">logging:</span> &#123;&#125;</span><br><span class="line"><span class="attr">nodeStatusReportFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">nodeStatusUpdateFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">rotateCertificates:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">runtimeRequestTimeout:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">staticPodPath:</span> <span class="string">/etc/kubernetes/manifests</span></span><br><span class="line"><span class="attr">streamingConnectionIdleTimeout:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">syncFrequency:</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">volumeStatsAggPeriod:</span> <span class="string">0s</span> </span><br></pre></td></tr></table></figure></li>
<li><p>当然也可以定制化配置文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line">  <span class="attr">anonymous:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheTTL:</span> <span class="string">2m0s</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">x509:</span></span><br><span class="line">    <span class="attr">clientCAFile:</span> <span class="string">/etc/kubernetes/pki/ca.crt</span></span><br><span class="line"><span class="attr">authorization:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">Webhook</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheAuthorizedTTL:</span> <span class="string">5m0s</span></span><br><span class="line">    <span class="attr">cacheUnauthorizedTTL:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">cgroupDriver:</span> <span class="string">systemd</span></span><br><span class="line"><span class="attr">clusterDNS:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line"><span class="attr">clusterDomain:</span> <span class="string">cluster.local</span></span><br><span class="line"><span class="attr">configMapAndSecretChangeDetectionStrategy:</span> <span class="string">Watch</span></span><br><span class="line"><span class="attr">containerLogMaxFiles:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">containerLogMaxSize:</span> <span class="string">10Mi</span></span><br><span class="line"><span class="attr">contentType:</span> <span class="string">application/vnd.kubernetes.protobuf</span></span><br><span class="line"><span class="attr">cpuCFSQuota:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cpuCFSQuotaPeriod:</span> <span class="string">100ms</span></span><br><span class="line"><span class="attr">cpuManagerPolicy:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">cpuManagerReconcilePeriod:</span> <span class="string">10s</span></span><br><span class="line"><span class="attr">enableControllerAttachDetach:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enableDebuggingHandlers:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">eventBurst:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">eventRecordQPS:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">evictionHard:</span></span><br><span class="line">  <span class="attr">imagefs.available:</span> <span class="number">15</span><span class="string">%</span></span><br><span class="line">  <span class="attr">memory.available:</span> <span class="string">200Mi</span></span><br><span class="line">  <span class="attr">nodefs.available:</span> <span class="number">10</span><span class="string">%</span></span><br><span class="line">  <span class="attr">nodefs.inodesFree:</span> <span class="number">10</span><span class="string">%</span></span><br><span class="line"><span class="attr">evictionPressureTransitionPeriod:</span> <span class="string">5m0s</span></span><br><span class="line"><span class="attr">failSwapOn:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">fileCheckFrequency:</span> <span class="string">20s</span></span><br><span class="line"><span class="attr">hairpinMode:</span> <span class="string">promiscuous-bridge</span></span><br><span class="line"><span class="attr">healthzBindAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">healthzPort:</span> <span class="number">10248</span></span><br><span class="line"><span class="attr">httpCheckFrequency:</span> <span class="string">20s</span></span><br><span class="line"><span class="attr">imageGCHighThresholdPercent:</span> <span class="number">85</span></span><br><span class="line"><span class="attr">imageGCLowThresholdPercent:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">imageMinimumGCAge:</span> <span class="string">2m0s</span></span><br><span class="line"><span class="attr">iptablesDropBit:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">iptablesMasqueradeBit:</span> <span class="number">14</span></span><br><span class="line"><span class="attr">kubeAPIBurst:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">kubeAPIQPS:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">makeIPTablesUtilChains:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">maxOpenFiles:</span> <span class="number">1000000</span></span><br><span class="line"><span class="attr">maxPods:</span> <span class="number">110</span> </span><br><span class="line"><span class="attr">nodeLeaseDurationSeconds:</span> <span class="number">40</span></span><br><span class="line"><span class="attr">nodeStatusReportFrequency:</span> <span class="string">1m0s</span></span><br><span class="line"><span class="attr">nodeStatusUpdateFrequency:</span> <span class="string">10s</span></span><br><span class="line"><span class="attr">oomScoreAdj:</span> <span class="number">-999</span></span><br><span class="line"><span class="attr">podPidsLimit:</span> <span class="number">-1</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">10250</span></span><br><span class="line"><span class="attr">registryBurst:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">registryPullQPS:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">resolvConf:</span> <span class="string">/etc/resolv.conf</span></span><br><span class="line"><span class="attr">rotateCertificates:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">runtimeRequestTimeout:</span> <span class="string">2m0s</span></span><br><span class="line"><span class="attr">serializeImagePulls:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">staticPodPath:</span> <span class="string">/etc/kubernetes/manifests</span></span><br><span class="line"><span class="attr">streamingConnectionIdleTimeout:</span> <span class="string">4h0m0s</span></span><br><span class="line"><span class="attr">syncFrequency:</span> <span class="string">1m0s</span></span><br><span class="line"><span class="attr">volumeStatsAggPeriod:</span> <span class="string">1m0s</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>启动Kubelet</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name=kubelet --net=host --pid=host --privileged \ </span><br><span class="line">-v /dev:/dev -v /sys:/sys:ro -v /var/run:/var/run:rw \</span><br><span class="line">-v /var/lib/calico:/var/lib/calico:ro \ </span><br><span class="line">-v /var/lib/docker/:/var/lib/docker:rw \ </span><br><span class="line">-v /var/lib/kubelet/:/var/lib/kubelet:shared \ </span><br><span class="line">-v /var/log:/var/log:shared -v /opt/cni/bin:/opt/cni/bin \</span><br><span class="line">-v /etc/cni/:/etc/cni -v /etc/kubernetes:/etc/kubernetes:ro \</span><br><span class="line">googlecontainersmirrors/hyperkube-amd64:v1.19.0-alpha.0 \</span><br><span class="line">kubelet --hostname-override=192.168.56.121 \</span><br><span class="line">--config=/etc/kubernetes/kubelet_settings.yml \ </span><br><span class="line">--kubeconfig=/etc/kubernetes/kubelet.conf \</span><br><span class="line">--register-node=true --network-plugin=cni</span><br></pre></td></tr></table></figure>
<h4 id="构建Kubelet镜像"><a href="#构建Kubelet镜像" class="headerlink" title="构建Kubelet镜像"></a>构建Kubelet镜像</h4></li>
<li><p>在Kubernetes 1.19版本之后便不再提供<code>googlecontainersmirrors/hyperkube-amd64</code>镜像，可使用如下<code>Dockerfile</code>构建镜像</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> antmoveh/debian-hyperkube-base-amd64:v1.<span class="number">1.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> version=v1.<span class="number">20.4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> https://storage.googleapis.com/kubernetes-release/release/<span class="variable">$&#123;version&#125;</span>/bin/linux/amd64/kubelet /usr/<span class="built_in">local</span>/bin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/kubelet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;kubelet&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker build --build-arg version=v1.20.4 -t kubectl:tag .</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果有将<code>kube-apiserver</code>等组件加入容器的需求，可以依次添加二进制文件到镜像内</li>
<li><code>antmoveh/debian-hyperkube-base-amd64:v1.1.3</code>镜像为<code>k8s.gcr.io/build-image/debian-hyperkube-base-amd64:v1.1.3</code></li>
<li>参考hyperkube镜像构建<a href="https://github.com/kubernetes/kubernetes/tree/release-1.18/cluster/images/hyperkube">https://github.com/kubernetes/kubernetes/tree/release-1.18/cluster/images/hyperkube</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubectl管理多集群</title>
    <url>/2021/05/07/Kubectl%E7%AE%A1%E7%90%86%E5%A4%9A%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><ul>
<li>当有多个Kubernetes集群需要管理时，我们需要在不同客户端之间切换，这个过程比较繁琐，幸运的是Kubectl提供了在多个Kubernetes集群间切换的能力，所以该篇文章便是实践kubectl管理多个k8s集群</li>
<li>梳理了官方文档以及各种博客实践文章，感觉十分繁琐，所以在次记录一下实现方案</li>
</ul>
<h4 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h4><ul>
<li>请先阅读官方文档：<a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/">https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/</a></li>
<li>已经拥有多个Kubernetes集群</li>
</ul>
<h4 id="Kubectl多个集群间切换"><a href="#Kubectl多个集群间切换" class="headerlink" title="Kubectl多个集群间切换"></a>Kubectl多个集群间切换</h4><h5 id="合并Kubeconfig文件"><a href="#合并Kubeconfig文件" class="headerlink" title="合并Kubeconfig文件"></a>合并Kubeconfig文件</h5><ul>
<li>将多个集群的<code>$home/.kube/config</code>文件拷贝到一起，并修改文件中 cluster name，context关联关系名称，user name，因为多个集群的名称相同</li>
<li>config1详细信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node-01 .kube]# cat $HOME/.kube/config1</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Config</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    api-version: v1</span><br><span class="line">    certificate-authority-data: xxxxxxx</span><br><span class="line">    server: &quot;https://172.20.8.113:6443&quot;</span><br><span class="line">  name: &quot;cn-k8s&quot;</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: &quot;cn-k8s&quot;</span><br><span class="line">    user: &quot;kube-admin-local&quot;</span><br><span class="line">  name: &quot;cn-k8s&quot;</span><br><span class="line">current-context: &quot;cn-k8s&quot;</span><br><span class="line">users:</span><br><span class="line">- name: &quot;kube-admin-local&quot;</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: xxxxxx</span><br><span class="line">    client-key-data: xxxxxx</span><br></pre></td></tr></table></figure>
<ul>
<li>config2详细信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node-01 .kube]# cat $HOME/.kube/config2</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Config</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    api-version: v1</span><br><span class="line">    certificate-authority-data: xxxxxx</span><br><span class="line">    server: &quot;https://172.19.8.113:6443&quot;</span><br><span class="line">  name: &quot;jp-k8s&quot;</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: &quot;jp-k8s&quot;</span><br><span class="line">    user: &quot;kube-admin-local&quot;</span><br><span class="line">  name: &quot;jp-k8s&quot;</span><br><span class="line">current-context: &quot;jp-k8s&quot;</span><br><span class="line">users:</span><br><span class="line">- name: &quot;kube-admin-local&quot;</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: xxxxxx</span><br><span class="line">    client-key-data: xxxxxx</span><br></pre></td></tr></table></figure>
<ul>
<li>执行如下命令进行合并</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$HOME</span>/.kube/config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> KUBECONFIG=config1:config2 kubectl config view --flatten &gt; <span class="variable">$HOME</span>/.kube/config</span></span><br><span class="line">- 合并完成后，便可使用kubectl config use-context xxxx 来切换集群了</span><br></pre></td></tr></table></figure>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="设置kubeconfig管理集群中指定namespace"><a href="#设置kubeconfig管理集群中指定namespace" class="headerlink" title="设置kubeconfig管理集群中指定namespace"></a>设置kubeconfig管理集群中指定namespace</h4><h5 id="方法一：使用CSR创建账户"><a href="#方法一：使用CSR创建账户" class="headerlink" title="方法一：使用CSR创建账户"></a>方法一：使用CSR创建账户</h5><ul>
<li><a href="https://k8s.imroc.io/security/user/create-user-using-csr-api/">https://k8s.imroc.io/security/user/create-user-using-csr-api/</a></li>
</ul>
<h5 id="方法二：创建客户端证书并绑定角色"><a href="#方法二：创建客户端证书并绑定角色" class="headerlink" title="方法二：创建客户端证书并绑定角色"></a>方法二：创建客户端证书并绑定角色</h5><ul>
<li><a href="https://blog.51cto.com/u_11954248/2481403">https://blog.51cto.com/u_11954248/2481403</a></li>
</ul>
<h5 id="方法三：使用RBAC实现kubeconfig管理指定namespace"><a href="#方法三：使用RBAC实现kubeconfig管理指定namespace" class="headerlink" title="方法三：使用RBAC实现kubeconfig管理指定namespace"></a>方法三：使用RBAC实现kubeconfig管理指定namespace</h5><ul>
<li><p>创建sa</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create ns linux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl create serviceaccount antmove -n linux</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建role</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">linux-role</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">    <span class="comment">#verbs: [&quot;*&quot;]</span></span><br><span class="line">    <span class="comment">##RO-Role</span></span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>]       </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;extensions&quot;</span>, <span class="string">&quot;apps&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;deployments&quot;</span>]</span><br><span class="line">    <span class="comment">#verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]</span></span><br><span class="line">    <span class="comment">##RO-Role</span></span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">role-bind-linux</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">subjects:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">antmove</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">linux-role</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取token</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get secret antmoveh-token-fgf5v -n linux -o jsonpath=&#123;.data.token&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将token写入kubeconfig文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl config set-credentials <span class="built_in">test</span> --token=$(kubectl get secret laomao-token-x7dxp -n linux39 -o jsonpath=&#123;.data.token&#125;)</span></span><br><span class="line">- 这里指定了namespace,当切换到这个context时，kubectl默认ns就会是linux</span><br><span class="line">- 如果想管理多个ns,则在rabc处设置ns管理规则</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl config set-context <span class="built_in">test</span> --cluster=kubernetes --namespace=linux --user=<span class="built_in">test</span></span></span><br><span class="line">- 切换到执行context</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl config use-context <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
</search>
