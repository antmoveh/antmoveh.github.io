<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vagrant快速搭建Kubernetes集群</title>
    <url>/2021/01/17/WinVagrantKubernetesCluster/</url>
    <content><![CDATA[<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul>
<li><p>自动化搭建Kubernetes集群环境</p>
</li>
<li><p>每个集群节点挂载1..N块磁盘</p>
</li>
<li><p>能够快速搭建完成</p>
</li>
<li><p>windows 10下完成集群搭建</p>
<a id="more"></a> 

</li>
</ul>
<h4 id="基础环境-amp-amp-基础组件"><a href="#基础环境-amp-amp-基础组件" class="headerlink" title="基础环境&amp;&amp;基础组件"></a>基础环境&amp;&amp;基础组件</h4><ul>
<li>windows 10 家庭中文版</li>
<li>virtualBox 6.1.16</li>
<li>vagrant 2.2.7</li>
</ul>
<h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><ul>
<li>为了快速的构建集群，我们需要构建一个基础镜像，在这个镜像里安装了很多依赖组件</li>
<li>将指定Kubernetes版本所需要的的镜像以及二进制文件下载到本地，避免外网下载</li>
<li>github.com搜索开源的vagrantfile构建Kubernetes集群方案，进行本地化修改</li>
<li>执行构建集群测试</li>
<li>需要一个好用的Bash工具，选择的Git Bash，也不用额外安装</li>
</ul>
<h4 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h4><h5 id="安装VirtualBox和Vagrant"><a href="#安装VirtualBox和Vagrant" class="headerlink" title="安装VirtualBox和Vagrant"></a>安装VirtualBox和Vagrant</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 都是从官网下载，选择合适的版本即可</span><br><span class="line">https:&#x2F;&#x2F;www.virtualbox.org&#x2F;wiki&#x2F;Downloads</span><br><span class="line">https:&#x2F;&#x2F;www.vagrantup.com&#x2F;downloads.html</span><br></pre></td></tr></table></figure>
<h5 id="对Git-Bash稍加配置，看起来更像操作linux系统"><a href="#对Git-Bash稍加配置，看起来更像操作linux系统" class="headerlink" title="对Git Bash稍加配置，看起来更像操作linux系统"></a>对Git Bash稍加配置，看起来更像操作linux系统</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim .minttyrc</span></span><br><span class="line"></span><br><span class="line">Locale=zh_CN</span><br><span class="line">Charset=UTF-8</span><br><span class="line">Columns=120</span><br><span class="line">Rows=35</span><br><span class="line">Font=Lucida Console</span><br><span class="line">FontHeight=11</span><br><span class="line">Term=xterm-256color</span><br><span class="line">CursorType=block</span><br><span class="line">CursorBlinks=yes</span><br><span class="line">Transparency=low</span><br><span class="line">BoldAsFont=yes</span><br><span class="line">AllowBlinking=no</span><br><span class="line">Scrollbar=none</span><br><span class="line">ScrollbackLines=10000</span><br><span class="line">ClickTargetMod=off</span><br><span class="line">ComposeKey=shift</span><br><span class="line">ForegroundColour=248,248,242</span><br><span class="line">BackgroundColour=39,40,34</span><br><span class="line">CursorColour=255,255,255</span><br><span class="line">Black=39,40,34</span><br><span class="line">BoldBlack=117,113,94</span><br><span class="line">Red=249,38,114</span><br><span class="line">BoldRed=204,6,78</span><br><span class="line">Green=166,226,46</span><br><span class="line">BoldGreen=122,172,24</span><br><span class="line">Yellow=255,255,81</span><br><span class="line">BoldYellow=240,169,69</span><br><span class="line">Blue=144,255,255</span><br><span class="line">BoldBlue=33,199,233</span><br><span class="line">Magenta=174,129,255</span><br><span class="line">BoldMagenta=126,51,255</span><br><span class="line">Cyan=161,239,228</span><br><span class="line">BoldCyan=95,227,210</span><br><span class="line">White=248,248,242</span><br><span class="line">BoldWhite=249,248,245</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim .bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Shows Git branch name <span class="keyword">in</span> prompt.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Show User @ Name (still with git branch name)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> PS1=<span class="string">&quot;\u@\h \W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ &quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Or hide User @ Name (still with git branch name)</span></span><br><span class="line">export PS1=&quot;[root@localhost \W] $ &quot;</span><br></pre></td></tr></table></figure>
<h5 id="构建基础镜像"><a href="#构建基础镜像" class="headerlink" title="构建基础镜像"></a>构建基础镜像</h5><ul>
<li><p>选择centos7.6作为基础镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 先手动下载下来，我下载的v201907.24.0</span><br><span class="line">https:&#x2F;&#x2F;app.vagrantup.com&#x2F;bento&#x2F;boxes&#x2F;centos-7.6</span><br></pre></td></tr></table></figure></li>
<li><p>制作基础镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- 在下载的镜像目录操作</span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant box add centos76 centos-7.6 <span class="comment"># 若是出现问题便写成绝对路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant init centos76</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant up</span> </span><br><span class="line">--- 等待虚拟机启动---</span><br><span class="line">- 进入虚拟机，默认账号密码vagrant:vagrant</span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant status</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant ssh default</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo su</span></span><br><span class="line">- 更改为aliyun源</span><br><span class="line"><span class="meta">$</span><span class="bash"> mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum makecache fast</span></span><br><span class="line">- 配置kubernetes的yum源</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum makecache fast</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y update</span></span><br><span class="line">- 安装一些需要的工具</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum makecache fast</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip sudo ntp libaio-devel wget vim ncurses-devel autoconf automake zlib-devel  python-devel epel-release openssh-server socat  ipvsadm conntrack ntpdate</span></span><br><span class="line">- 关闭防火墙</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install iptables-services -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service iptables stop &amp;&amp; systemctl <span class="built_in">disable</span> iptables</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ntpdate cn.pool.ntp.org</span></span><br><span class="line">- 将同步时间加入计划任务</span><br><span class="line"><span class="meta">$</span><span class="bash"> crontab -e</span></span><br><span class="line">* */1 * * * /usr/sbin/ntpdate   cn.pool.ntp.org</span><br><span class="line">- 重启crond服务</span><br><span class="line"><span class="meta">$</span><span class="bash"> service crond restart</span></span><br><span class="line">- 永久关闭selinux</span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/sysconfig/selinux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span></span><br><span class="line">- 重启生效，这个可以配置完在执行</span><br><span class="line"><span class="meta">$</span><span class="bash"> reboot -f</span></span><br><span class="line">- 关闭交换空间</span><br><span class="line"><span class="meta">$</span><span class="bash"> swapoff -a</span></span><br><span class="line">- 永久禁用，打开/etc/fstab注释掉swap那一行。</span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span></span><br><span class="line">- 修改内核参数</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;<span class="string">EOF &gt;  etc/sysctl.d/k8s.conf</span></span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl --system</span></span><br><span class="line">- 安装docker，Kubernetes依赖哪个版本Docker并不重要，所以不必后安装</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y docker-ce-19.03.7-3.el7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status docker</span></span><br><span class="line">- 修改docker配置文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">&#123;</span><br><span class="line"> &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line"> &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line"> &quot;log-opts&quot;: &#123;</span><br><span class="line">   &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"> &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line"> &quot;storage-opts&quot;: [</span><br><span class="line">   &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">- 重启docker</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload &amp;&amp; systemctl restart docker</span></span><br><span class="line">- 设置iptables</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-ip6tables</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span></span><br><span class="line">vm.swappiness = 0</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">&quot;&quot;&quot; &gt; /etc/sysctl.conf</span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl -p</span></span><br><span class="line"></span><br><span class="line">- 开启ipvs</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack&quot;</span><br><span class="line">for kernel_module in $&#123;ipvs_modules&#125;; do</span><br><span class="line"> /sbin/modinfo -F filename $&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"> if [ $? -eq 0 ]; then</span><br><span class="line">   /sbin/modprobe $&#123;kernel_module&#125;</span><br><span class="line"> fi</span><br><span class="line">done</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep ip_vs</span></span><br></pre></td></tr></table></figure></li>
<li><p>生成镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- 清理一些缓存文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /tmp/*</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span> -c</span></span><br><span class="line">- 等待一切安装完成后，打包成镜像</span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant halt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vagrant package --base default --output base.box报错，因为default并不是虚拟机的名字，virtualbox里可以看到他的名字</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant package --output base.box</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant box add base base.box <span class="comment"># 这样就可以使用了</span></span></span><br></pre></td></tr></table></figure>
<h5 id="收集部署包"><a href="#收集部署包" class="headerlink" title="收集部署包"></a>收集部署包</h5></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- 收集kubernetes-1.18.2版本二进制包</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install --downloadonly --downloaddir=k8s kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2</span></span><br><span class="line">- 查看依赖镜像</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubeadm config images list --kubernetes-version=v1.18.2</span></span><br><span class="line">- 收集依赖镜像，从阿里云下载</span><br><span class="line">images=(</span><br><span class="line">kube-apiserver:v1.18.2</span><br><span class="line">kube-controller-manager:v1.18.2</span><br><span class="line">kube-scheduler:v1.18.2</span><br><span class="line">kube-proxy:v1.18.2</span><br><span class="line">pause:3.2</span><br><span class="line">etcd:3.4.3-0</span><br><span class="line">coredns:1.6.7</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">        docker pull registry.aliyuncs.com/google_containers/$imageName</span><br><span class="line">        docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName</span><br><span class="line">        docker rmi registry.aliyuncs.com/google_containers/$imageName</span><br><span class="line">done</span><br><span class="line">- 打包镜像(docker save)</span><br><span class="line">images/</span><br><span class="line">├── calico-cni.tar.gz</span><br><span class="line">├── calico-node.tar.gz</span><br><span class="line">├── coredns.tar.gz</span><br><span class="line">├── etcd.tar.gz</span><br><span class="line">├── kube-apiserver.tar.gz</span><br><span class="line">├── kube-controller-manager.tar.gz</span><br><span class="line">├── kube-proxy.tar.gz</span><br><span class="line">├── kube-scheduler.tar.gz</span><br><span class="line">└── pause.tar.gz</span><br></pre></td></tr></table></figure>
<h5 id="编写调试vagrantfile"><a href="#编写调试vagrantfile" class="headerlink" title="编写调试vagrantfile"></a>编写调试vagrantfile</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考：https:&#x2F;&#x2F;exxsyseng@bitbucket.org&#x2F;exxsyseng&#x2F;k8s_centos.git</span><br></pre></td></tr></table></figure>
<h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h4><h5 id="Nginx服务部署"><a href="#Nginx服务部署" class="headerlink" title="Nginx服务部署"></a>Nginx服务部署</h5><ul>
<li><p>部署Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- vagrant支持目录映射，windows下目录映射需要安装额外的增强设施，并且我不太想用目录映射</span><br><span class="line">- 其二是为了最小化改动vagrantfile,当部署其他版本Kubernetes时，只要将部署包放到指定目录，vagrantfile改动包获取地址就好了</span><br><span class="line">- 从nginx官网下载nginx&#x2F;Windows-1.18.0</span><br><span class="line">https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;download.html</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>将刚刚收集的依赖包放到指定目录，有一个网络插件calico</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /] $ cd /d/nginx-kubernetes-static/k8s-1.18.2/</span><br><span class="line">[root@localhost k8s-1.18.2] $ ll</span><br><span class="line">total 1085800</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121     13585  1月 12 14:34 calico.yaml</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  83932160  1月 12 09:56 calico-cni.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  73531392  1月 12 09:55 calico-node.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  43932160  1月 12 09:50 coredns.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121   5318270  1月  4 16:42 cri-tools-1.13.0-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 290010624  1月 12 09:51 etcd.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121   9205578  1月  4 16:46 kubeadm-1.18.2-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 174562304  1月 12 09:48 kube-apiserver.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 163949568  1月 12 09:50 kube-controller-manager.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121   9995342  1月  4 16:49 kubectl-1.18.2-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  21808642  1月  4 16:55 kubelet-1.18.2-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 118547456  1月 12 09:48 kube-proxy.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  19487362  1月  4 16:56 kubernetes-cni-0.8.7-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121  96840704  1月 12 09:49 kube-scheduler.tar.gz</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121    692736  1月 12 09:50 pause.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>关于calico</p>
<blockquote>
<p>这里有一个要注意的点，virtualbox创建的虚拟机eth0地址是10.0.2.15,这个是用来vagrant ssh 通信使用的，这个我们改不了</p>
<p>我们配置了一个私有网络进行通信，就是我们主机上Host Only网卡的Ip地址段</p>
<p>而部署完calico后，会扫描所有网卡，所有虚拟机上都有10.0.2.15这个IP地址就会导致访问不通，calico Pod无法启动</p>
<p>此时我们要指定calico要使用的私有网卡，配置如下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- calicao.yaml中name:calico-node的DaemonSet 环境变量更改为指定网卡</span><br><span class="line">- name: IP_AUTODETECTION_METHOD</span><br><span class="line">  value: &quot;interface&#x3D;eth1&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>修改nginx.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~] $ cd /d/Program\ Files\ \(x86\)/nginx-1.18.0/conf/</span><br><span class="line">[root@localhost conf] $ ls</span><br><span class="line">fastcgi.conf  fastcgi_params  koi-utf  koi-win  mime.types  nginx.conf  scgi_params  uwsgi_params  win-utf</span><br><span class="line">[root@localhost conf] $ vim nginx.conf</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        # 增加了这么一个路径</span><br><span class="line">        location ~* /k8s &#123;</span><br><span class="line">            root D://nginx-kubernetes-static//;</span><br><span class="line">            autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- nginx 目录下操作</span><br><span class="line"><span class="meta">$</span><span class="bash"> start nginx.exe</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx.exe -s stop <span class="comment"># 停止nginx</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx.exe -t -c confg/nginx.conf <span class="comment"># 检查配置</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx.exe -s reload <span class="comment"># 重新加载配置</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="第一版：不需要磁盘挂载的集群"><a href="#第一版：不需要磁盘挂载的集群" class="headerlink" title="第一版：不需要磁盘挂载的集群"></a>第一版：不需要磁盘挂载的集群</h5></li>
<li><p>目录结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vagrant-cluster] $ ll</span><br><span class="line">total 17</span><br><span class="line">-rwxr-xr-x 1 antmoveh 197121 1456  1月 12 13:37 bootstrap.sh*</span><br><span class="line">-rwxr-xr-x 1 antmoveh 197121 1029  1月 13 11:51 bootstrap_kmaster.sh*</span><br><span class="line">-rwxr-xr-x 1 antmoveh 197121  220  1月 13 11:53 bootstrap_kworker.sh*</span><br><span class="line">-rw-r--r-- 1 antmoveh 197121 1570  1月 13 11:30 Vagrantfile</span><br></pre></td></tr></table></figure></li>
<li><p>Vagrantfile</p>
<blockquote>
<ul>
<li>因为我的Host-Only网卡的IP地址为192.168.56.1，所以虚拟机的私有网络使用此网段，并且固定IP</li>
<li>修改NodeCount数量便能扩展worker</li>
<li>workernode.vm.box = “base” 这个是刚刚制作的基础镜像</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -*- mode: ruby -*-</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi: <span class="built_in">set</span> ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[&#x27;VAGRANT_NO_PARALLEL&#x27;] = &#x27;yes&#x27;</span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> default router</span></span><br><span class="line">  config.vm.provision &quot;shell&quot;,</span><br><span class="line">    run: &quot;always&quot;,</span><br><span class="line">    inline: &quot;route del default &amp;&amp; route add default gw 192.168.56.1&quot;</span><br><span class="line"></span><br><span class="line">  config.vm.synced_folder &#x27;.&#x27;, &#x27;/vagrant&#x27;, disabled: true</span><br><span class="line"></span><br><span class="line">  config.vm.provision &quot;shell&quot;, path: &quot;bootstrap.sh&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Kubernetes Master Server</span></span><br><span class="line">  config.vm.define &quot;kmaster&quot; do |kmaster|</span><br><span class="line">    kmaster.vm.box = &quot;base&quot;</span><br><span class="line">    kmaster.vm.hostname = &quot;192.168.56.120&quot;</span><br><span class="line">    kmaster.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.120&quot;</span><br><span class="line">    kmaster.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">      v.name = &quot;192.168.56.120&quot;</span><br><span class="line">      v.memory = 4096</span><br><span class="line">      v.cpus = 2</span><br><span class="line">    end</span><br><span class="line">	kmaster.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">	  v.customize [&quot;modifyvm&quot;, :id, &quot;--macaddress2&quot;, &quot;080027df863a&quot;]</span><br><span class="line">	end</span><br><span class="line">    kmaster.vm.provision &quot;shell&quot;, path: &quot;bootstrap_kmaster.sh&quot;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  NodeCount = 2</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Kubernetes Worker Nodes</span></span><br><span class="line">  (1..NodeCount).each do |i|</span><br><span class="line">    config.vm.define &quot;kworker#&#123;i&#125;&quot; do |workernode|</span><br><span class="line">      workernode.vm.box = &quot;base&quot;</span><br><span class="line">      workernode.vm.hostname = &quot;192.168.56.12#&#123;i&#125;&quot;</span><br><span class="line">      workernode.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.12#&#123;i&#125;&quot;</span><br><span class="line">      workernode.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">        v.name = &quot;192.168.56.12#&#123;i&#125;&quot;</span><br><span class="line">        v.memory = 2048</span><br><span class="line">        v.cpus = 2</span><br><span class="line">      end</span><br><span class="line">   	  #workernode.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">   	  #  v.customize [&quot;modifyvm&quot;, :id, &quot;--macaddress2&quot;, &quot;080027df863a&quot;]</span><br><span class="line">  	  #end</span><br><span class="line">      workernode.vm.provision &quot;shell&quot;, path: &quot;bootstrap_kworker.sh&quot;</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>bootstrap.sh</p>
<blockquote>
<p>这个是所有节点都执行的脚本，主要是安装kubeadm加载依赖镜像</p>
<p>wget <a href="http://192.168.56.1/k8s-1.18.2/">http://192.168.56.1/k8s-1.18.2/</a> 访问的便是Nginx服务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> base image</span></span><br><span class="line">echo &quot;[TASK 0] base centos has install docker&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Install Kubernetes</span></span><br><span class="line">echo &quot;[TASK 1] Install Kubernetes (kubeadm, kubelet and kubectl)&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">yum install -y kubeadm-1.18.2 kubelet-1.18.2 &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">yum -y install --downloadonly --downloaddir=k8s kubelet kubeadm kubectl</span></span><br><span class="line">kube=&quot;cri-tools-1.13.0-0.x86_64.rpm kubeadm-1.18.2-0.x86_64.rpm kubectl-1.18.2-0.x86_64.rpm kubelet-1.18.2-0.x86_64.rpm kubernetes-cni-0.8.7-0.x86_64.rpm&quot;</span><br><span class="line">for i in $kube;do</span><br><span class="line">  wget http://192.168.56.1/k8s-1.18.2/$i</span><br><span class="line">done</span><br><span class="line">yum -y localinstall *rpm</span><br><span class="line">rm -rf *rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start and Enable kubelet service</span></span><br><span class="line">echo &quot;[TASK 2] Enable and start kubelet service&quot;</span><br><span class="line">systemctl enable kubelet &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl start kubelet &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line"></span><br><span class="line">echo &quot;[TASk 3] local load image&quot;</span><br><span class="line">images=&quot;calico-cni.tar.gz calico-node.tar.gz coredns.tar.gz etcd.tar.gz kube-apiserver.tar.gz kube-controller-manager.tar.gz kube-proxy.tar.gz kube-scheduler.tar.gz pause.tar.gz&quot;</span><br><span class="line">for i in $images ;do</span><br><span class="line">  wget http://192.168.56.1/k8s-1.18.2/$i</span><br><span class="line">  docker load -i $i</span><br><span class="line">  rm -rf $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Enable ssh password authentication</span></span><br><span class="line">echo &quot;[TASK 4] Enable ssh password authentication&quot;</span><br><span class="line">sed -i &#x27;s/^PasswordAuthentication no/PasswordAuthentication yes/&#x27; /etc/ssh/sshd_config</span><br><span class="line">systemctl reload sshd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set Root password</span></span><br><span class="line">echo &quot;[TASK 5] Set root password&quot;</span><br><span class="line">echo &quot;kubeadmin&quot; | passwd --stdin root &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Update vagrant user<span class="string">&#x27;s bashrc file</span></span></span><br><span class="line">echo &quot;export TERM=xterm&quot; &gt;&gt; /etc/bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>bootstrap_kmaster.sh</p>
<blockquote>
<p>这个是master节点执行的脚本</p>
<p>执行部署kuberentes master节点</p>
<p>部署网络插件</p>
<p>启动一个HTTP服务，暴露kubejoin脚本，以便被Node获取使用</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initialize Kubernetes</span></span><br><span class="line">echo &quot;[TASK 1] Initialize Kubernetes Cluster&quot;</span><br><span class="line">kubeadm init --kubernetes-version=v1.18.2 --apiserver-advertise-address=192.168.56.120 --pod-network-cidr=10.244.0.0/16 &gt;&gt; /root/kubeinit.log 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Copy Kube admin config</span></span><br><span class="line">echo &quot;[TASK 2] Copy kube admin config to Vagrant user .kube directory&quot;</span><br><span class="line">mkdir /home/vagrant/.kube</span><br><span class="line">cp /etc/kubernetes/admin.conf /home/vagrant/.kube/config</span><br><span class="line">chown -R vagrant:vagrant /home/vagrant/.kube</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Copy Kube admin config</span></span><br><span class="line">mkdir /root/.kube</span><br><span class="line">cp /etc/kubernetes/admin.conf /root/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) /root/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deploy flannel network</span></span><br><span class="line">echo &quot;[TASK 3] Deploy Calico network&quot;</span><br><span class="line">su - vagrant -c &quot;kubectl create -f http://192.168.56.1/k8s-1.18.2/calico.yaml&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Cluster join <span class="built_in">command</span></span></span><br><span class="line">echo &quot;[TASK 4] Generate and save cluster join command to /joincluster.sh&quot;</span><br><span class="line">kubeadm token create --print-join-command &gt; joincluster.sh</span><br><span class="line"></span><br><span class="line">echo &quot;[TASK 4] start http server&quot;</span><br><span class="line">nohup python -m &quot;SimpleHTTPServer&quot; &gt;&gt; /root/http.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
<li><p>bootstrap_kworker.sh</p>
<blockquote>
<p>获取kubejoin脚本，然后执行</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Join worker nodes to the Kubernetes cluster</span></span><br><span class="line">echo &quot;[TASK 1] Join node to Kubernetes Cluster&quot;</span><br><span class="line">wget http://192.168.56.120:8000/joincluster.sh</span><br><span class="line"></span><br><span class="line">cat joincluster.sh</span><br><span class="line"></span><br><span class="line">bash joincluster.sh &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>如果上边已经满足了你的需求，到这就结束了，下边就是掉坑环节了。</p>
</li>
</ul>
<h5 id="第二版：需要挂载额外磁盘的集群"><a href="#第二版：需要挂载额外磁盘的集群" class="headerlink" title="第二版：需要挂载额外磁盘的集群"></a>第二版：需要挂载额外磁盘的集群</h5><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><ul>
<li><h6 id="为什么会有这一章？"><a href="#为什么会有这一章？" class="headerlink" title="为什么会有这一章？"></a>为什么会有这一章？</h6><blockquote>
<p>因为vagrant或者virtulbox多虚拟机磁盘挂载时存在各种各样的问题</p>
</blockquote>
</li>
<li><p>理论上磁盘挂机逻辑是怎么样的？</p>
<blockquote>
<p>在一个vagrantfile中配置多个虚拟机，每个虚拟机挂载多块盘，并且大家通用示例都是这样的</p>
</blockquote>
</li>
<li><p>Vagrantfile多个虚拟机挂载多个磁盘有什么问题？</p>
<blockquote>
<p>在vagrant up时，只有第一个启动的虚拟机挂载磁盘成功并且挂载磁盘的容器并不是设置的容量，而是其他节点应该挂载的磁盘容量，</p>
<p>第二个虚拟机便报VBOX_E_FILE_ERROR (0x80bb0004)错误，对于此错误的解释大约如下：</p>
<ol>
<li>你的磁盘扇区损坏了，建议检查磁盘</li>
<li>vagrant不能并行运行</li>
<li>virtualbox存在Bug，建议你更换匹配版本</li>
<li>你使用的windows系统，报这个错误正常</li>
</ol>
<p>尝试使用插件vagrant-persistent-storage，报其他错误，无心研究这个插件了</p>
</blockquote>
</li>
<li><p>本方案如何解决上述问题</p>
<blockquote>
<p>观察到在Vagrantfile中如果只启动一个虚拟机，无论配置挂载多少块磁盘都能成功</p>
<p>由此一个想法产生了，将vagrantfile隔离在不同目录下，每个vagrantfile配置一个虚拟机，编写一个脚本来管理这些目录</p>
</blockquote>
</li>
</ul>
<h6 id="多虚拟机挂载磁盘"><a href="#多虚拟机挂载磁盘" class="headerlink" title="多虚拟机挂载磁盘"></a>多虚拟机挂载磁盘</h6><ul>
<li><p>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- bootstrap.sh、bootstrap_kmaster.sh、bootstrap_kworker.sh是没有任何更改的</span><br><span class="line">- 增加了vagrant.sh脚本</span><br><span class="line">- master/Vagrantfile删除了node部分</span><br><span class="line">- work1/Vagrantfile删除了master部分，并且增加了磁盘设置</span><br><span class="line">└─vagrant-disk</span><br><span class="line">    |-vagrant.sh</span><br><span class="line">    ├─master</span><br><span class="line">    │  └─bootstrap.sh</span><br><span class="line">    │  └─bootstrap_kmaster.sh</span><br><span class="line">    │  └─Vagrantfile</span><br><span class="line">    ├─worker1</span><br><span class="line">    │  └─bootstrap.sh</span><br><span class="line">    │  └─bootstrap_kworker.sh</span><br><span class="line">    │  └─Vagrantfile</span><br><span class="line">    ├─worker2</span><br><span class="line">    │  └─bootstrap.sh  </span><br><span class="line">    │  └─bootstrap_kworker.sh   </span><br><span class="line">    │  └─Vagrantfile   </span><br><span class="line">    └─worker3</span><br><span class="line">       └─bootstrap.sh  </span><br><span class="line">       └─bootstrap_kworker.sh</span><br><span class="line">       └─Vagrantfile</span><br></pre></td></tr></table></figure></li>
<li><p>Vagrantfile</p>
<blockquote>
<p>这是worker1的脚本，修改count=2便是worker2的脚本</p>
<p>若要添加多块盘，根据注释部分依次添加就好了，注意–port依次增加最大为30</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -*- mode: ruby -*-</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi: <span class="built_in">set</span> ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[&#x27;VAGRANT_NO_PARALLEL&#x27;] = &#x27;yes&#x27;</span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> default router</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">config.vm.provision <span class="string">&quot;shell&quot;</span>,</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  run: <span class="string">&quot;always&quot;</span>,</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  inline: <span class="string">&quot;route del default &amp;&amp; route add default gw 192.168.56.1&quot;</span></span></span><br><span class="line"></span><br><span class="line">  config.vm.synced_folder &#x27;.&#x27;, &#x27;/vagrant&#x27;, disabled: true</span><br><span class="line">  </span><br><span class="line">  config.vm.provision &quot;shell&quot;, path: &quot;bootstrap.sh&quot;</span><br><span class="line">  </span><br><span class="line">  count=1</span><br><span class="line">  config.vm.define &quot;kworker#&#123;count&#125;&quot; do |workernode|</span><br><span class="line">    workernode.vm.box = &quot;base&quot;</span><br><span class="line">    workernode.vm.hostname = &quot;192.168.56.12#&#123;count&#125;&quot;</span><br><span class="line">    workernode.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.12#&#123;count&#125;&quot;</span><br><span class="line">    workernode.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">      v.name = &quot;192.168.56.12#&#123;count&#125;&quot;</span><br><span class="line">      v.memory = 2048</span><br><span class="line">      v.cpus = 2</span><br><span class="line">    end</span><br><span class="line">   	#workernode.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">   	#  v.customize [&quot;modifyvm&quot;, :id, &quot;--macaddress2&quot;, &quot;080027df863a&quot;]</span><br><span class="line"><span class="meta">  	#</span><span class="bash">end</span></span><br><span class="line">	  </span><br><span class="line">	config.vm.provider &quot;virtualbox&quot; do |p|</span><br><span class="line">	  disk=&quot;kworker#&#123;count&#125;.vdi&quot;</span><br><span class="line">      unless File.exist?(disk)</span><br><span class="line">        p.customize [&#x27;createhd&#x27;, &#x27;--filename&#x27;, disk, &#x27;--format&#x27;, &#x27;VDI&#x27;, &#x27;--size&#x27;, 20 * 1024]</span><br><span class="line">      end</span><br><span class="line">      p.customize [&#x27;storageattach&#x27;, :id, &#x27;--storagectl&#x27;, &#x27;SATA Controller&#x27;, &#x27;--port&#x27;, 1, &#x27;--device&#x27;, 0, &#x27;--type&#x27;, &#x27;hdd&#x27;, &#x27;--medium&#x27;, disk]</span><br><span class="line">      #disk=&quot;kworker#&#123;count&#125;.vdi&quot;</span><br><span class="line">      #unless File.exist?(disk)</span><br><span class="line">      #  p.customize [&#x27;createhd&#x27;, &#x27;--filename&#x27;, disk, &#x27;--format&#x27;, &#x27;VDI&#x27;, &#x27;--size&#x27;, 20 * 1024]</span><br><span class="line">      #end</span><br><span class="line">      #p.customize [&#x27;storageattach&#x27;, :id, &#x27;--storagectl&#x27;, &#x27;SATA Controller&#x27;, &#x27;--port&#x27;, 2, &#x27;--device&#x27;, 0, &#x27;--type&#x27;, &#x27;hdd&#x27;, &#x27;--medium&#x27;, disk]</span><br><span class="line">	end</span><br><span class="line">	 </span><br><span class="line">    workernode.vm.provision &quot;shell&quot;, path: &quot;bootstrap_kworker.sh&quot;</span><br><span class="line">  end  </span><br><span class="line"> </span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>vagrant.sh</p>
<blockquote>
<p>所有操作通过这个脚本执行，模仿vagrant的命令</p>
<p>若是在新加一个节点，folders在增加一个目录就行了</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">op=$1</span><br><span class="line"></span><br><span class="line">folders=&quot;master worker1 worker2 worker3&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;up&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant up &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;destroy&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant destroy &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;reload&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant reload &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;halt&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant halt &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;ssh&quot; ]; then</span><br><span class="line">    cd $2 &amp;&amp; vagrant ssh $3 &amp;&amp; cd ..</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$op&quot; == &quot;status&quot; ]; then</span><br><span class="line">  for i in $folders;do</span><br><span class="line">    cd $i &amp;&amp; vagrant status &amp;&amp; cd ..</span><br><span class="line">  done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./vagrant.sh up # 启动集群</span><br><span class="line">./vagrant.sh halt # 停止集群</span><br><span class="line">./vagrant.sh destroy # 销毁集群</span><br><span class="line">./vagrant.sh status # 查看集群装</span><br><span class="line">./vagrant.sh reload # 重新载入集群</span><br><span class="line">./vagrant.sh ssh worker1 kworker1 # 要先指定目录在指定虚拟机名称</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Vagrant</tag>
        <tag>Kubernetes</tag>
        <tag>Windows</tag>
        <tag>Disk</tag>
      </tags>
  </entry>
</search>
